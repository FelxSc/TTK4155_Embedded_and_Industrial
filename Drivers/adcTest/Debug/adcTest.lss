
adcTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000134  00800100  00000c38  00000ccc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800234  00800234  00000e00  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000664  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000271  00000000  00000000  00001538  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025a  00000000  00000000  000017a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000017c  00000000  00000000  00001a04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031f  00000000  00000000  00001b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005c0  00000000  00000000  00001e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  0000245f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	12 e0       	ldi	r17, 0x02	; 2
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e8 e3       	ldi	r30, 0x38	; 56
  84:	fc e0       	ldi	r31, 0x0C	; 12
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a4 33       	cpi	r26, 0x34	; 52
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	a4 e3       	ldi	r26, 0x34	; 52
  96:	b2 e0       	ldi	r27, 0x02	; 2
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a1 34       	cpi	r26, 0x41	; 65
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 79 01 	call	0x2f2	; 0x2f2 <main>
  a6:	0c 94 1a 06 	jmp	0xc34	; 0xc34 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <USART_Receive>:
}

unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
  ae:	5f 9b       	sbis	0x0b, 7	; 11
  b0:	fe cf       	rjmp	.-4      	; 0xae <USART_Receive>
	;
	/* Get and return received data from buffer */
	return UDR0;
  b2:	8c b1       	in	r24, 0x0c	; 12
}
  b4:	08 95       	ret

000000b6 <USART_Transmit>:

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<< UDRE0)) )
  b6:	5d 9b       	sbis	0x0b, 5	; 11
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <USART_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
  ba:	8c b9       	out	0x0c, r24	; 12
  bc:	08 95       	ret

000000be <USART_Init>:


void USART_Init( unsigned int ubrr )
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
  be:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
  c0:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  c2:	88 e1       	ldi	r24, 0x18	; 24
  c4:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
  c6:	8e e8       	ldi	r24, 0x8E	; 142
  c8:	80 bd       	out	0x20, r24	; 32
  ca:	08 95       	ret

000000cc <ExernalMemoryInit>:
}


void ExernalMemoryInit( void )
{
	MCUCR |= (1<<SRE); // Enable External memory
  cc:	85 b7       	in	r24, 0x35	; 53
  ce:	80 68       	ori	r24, 0x80	; 128
  d0:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2); // mask PORTC 4 - 7 JTAG
  d2:	80 b7       	in	r24, 0x30	; 48
  d4:	80 62       	ori	r24, 0x20	; 32
  d6:	80 bf       	out	0x30, r24	; 48
  d8:	08 95       	ret

000000da <adcInit>:

void adcInit( void )
{
	
	// PortE pin0 as input
	DDRE &= ~(1 << PE0);
  da:	30 98       	cbi	0x06, 0	; 6
	
	// PortB pin0 as input
	DDRB &= ~(1 << PB0);
  dc:	b8 98       	cbi	0x17, 0	; 23
	
	// PortD pin 2 and 3 as input
	DDRD &= ~(1 << PD2);
  de:	8a 98       	cbi	0x11, 2	; 17
	DDRD &= ~(1 << PD3);
  e0:	8b 98       	cbi	0x11, 3	; 17
	
	// Set pull-up resistor PE0 & PB0
	PORTE |= (1 << PE0);
  e2:	38 9a       	sbi	0x07, 0	; 7
	PORTB |= (1 << PB0);
  e4:	c0 9a       	sbi	0x18, 0	; 24
	
	// pull-down
	PORTD &= ~(1 << PD2);
  e6:	92 98       	cbi	0x12, 2	; 18
	PORTD &= ~(1 << PD3);
  e8:	93 98       	cbi	0x12, 3	; 18
  ea:	08 95       	ret

000000ec <select_ADC_channel>:



void select_ADC_channel(channel_t channel)
{	
	switch(channel){
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	69 f0       	breq	.+26     	; 0x10a <select_ADC_channel+0x1e>
  f0:	28 f0       	brcs	.+10     	; 0xfc <select_ADC_channel+0x10>
  f2:	82 30       	cpi	r24, 0x02	; 2
  f4:	89 f0       	breq	.+34     	; 0x118 <select_ADC_channel+0x2c>
  f6:	83 30       	cpi	r24, 0x03	; 3
  f8:	b1 f0       	breq	.+44     	; 0x126 <select_ADC_channel+0x3a>
  fa:	1c c0       	rjmp	.+56     	; 0x134 <select_ADC_channel+0x48>
		case CHANNEL1:
			*extADC = (uint8_t ) 0x04;
  fc:	e0 91 06 01 	lds	r30, 0x0106
 100:	f0 91 07 01 	lds	r31, 0x0107
 104:	84 e0       	ldi	r24, 0x04	; 4
 106:	80 83       	st	Z, r24
			break;
 108:	08 95       	ret
		case CHANNEL2:
			*extADC = (uint8_t ) 0x05;
 10a:	e0 91 06 01 	lds	r30, 0x0106
 10e:	f0 91 07 01 	lds	r31, 0x0107
 112:	85 e0       	ldi	r24, 0x05	; 5
 114:	80 83       	st	Z, r24
			break;
 116:	08 95       	ret
		case CHANNEL3:
			*extADC = (uint8_t ) 0x06;
 118:	e0 91 06 01 	lds	r30, 0x0106
 11c:	f0 91 07 01 	lds	r31, 0x0107
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	80 83       	st	Z, r24
			break;
 124:	08 95       	ret
		case CHANNEL4:
			*extADC = (uint8_t ) 0x07;
 126:	e0 91 06 01 	lds	r30, 0x0106
 12a:	f0 91 07 01 	lds	r31, 0x0107
 12e:	87 e0       	ldi	r24, 0x07	; 7
 130:	80 83       	st	Z, r24
			break;
 132:	08 95       	ret
		default:
			printf("Invalid channel");
 134:	88 e0       	ldi	r24, 0x08	; 8
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	9f 93       	push	r25
 13a:	8f 93       	push	r24
 13c:	0e 94 0d 02 	call	0x41a	; 0x41a <printf>
 140:	0f 90       	pop	r0
 142:	0f 90       	pop	r0
 144:	08 95       	ret

00000146 <getADCdata>:
	
}

uint8_t getADCdata(channel_t channel)
{
	select_ADC_channel(channel);
 146:	0e 94 76 00 	call	0xec	; 0xec <select_ADC_channel>
	while (PINE & (1<<PE0)); // Wait for ADC data
 14a:	28 99       	sbic	0x05, 0	; 5
 14c:	fe cf       	rjmp	.-4      	; 0x14a <getADCdata+0x4>
	ADCdata = *extADC;
 14e:	e0 91 06 01 	lds	r30, 0x0106
 152:	f0 91 07 01 	lds	r31, 0x0107
 156:	80 81       	ld	r24, Z
 158:	80 93 36 02 	sts	0x0236, r24
	return ADCdata;
 15c:	80 91 36 02 	lds	r24, 0x0236
}
 160:	08 95       	ret

00000162 <sliderDriver>:


void sliderDriver()
{
	uint8_t leftSliderData, rightSliderData;
	leftSliderData = getADCdata(CHANNEL1);	//Left slider
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	0e 94 a3 00 	call	0x146	; 0x146 <getADCdata>
	printf("\n\rLeft slider: %d \n\r", leftSliderData);
 168:	1f 92       	push	r1
 16a:	8f 93       	push	r24
 16c:	88 e1       	ldi	r24, 0x18	; 24
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	9f 93       	push	r25
 172:	8f 93       	push	r24
 174:	0e 94 0d 02 	call	0x41a	; 0x41a <printf>
	
	
	rightSliderData = getADCdata(CHANNEL2);	// Right slider
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	0e 94 a3 00 	call	0x146	; 0x146 <getADCdata>
	printf("Right slider: %d \n\r", rightSliderData);
 17e:	1f 92       	push	r1
 180:	8f 93       	push	r24
 182:	8d e2       	ldi	r24, 0x2D	; 45
 184:	91 e0       	ldi	r25, 0x01	; 1
 186:	9f 93       	push	r25
 188:	8f 93       	push	r24
 18a:	0e 94 0d 02 	call	0x41a	; 0x41a <printf>
 18e:	8d b7       	in	r24, 0x3d	; 61
 190:	9e b7       	in	r25, 0x3e	; 62
 192:	08 96       	adiw	r24, 0x08	; 8
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	f8 94       	cli
 198:	9e bf       	out	0x3e, r25	; 62
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	8d bf       	out	0x3d, r24	; 61
 19e:	08 95       	ret

000001a0 <get_joystick_direction>:
joystick_direction_t get_joystick_direction(uint8_t joyst_coord_X, uint8_t joyst_coord_Y){
	
	int8_t signed_joyst_coord_X, signed_joyst_coord_Y;
	uint8_t abs_signed_joyst_coord_X, abs_signed_joyst_coord_Y;
	
	signed_joyst_coord_X = joyst_coord_X - 128; //joystickCalibration.x_offset;
 1a0:	80 58       	subi	r24, 0x80	; 128
	signed_joyst_coord_Y = joyst_coord_Y - 128; //joystickCalibration.y_offset;
	abs_signed_joyst_coord_X = abs(signed_joyst_coord_X);
 1a2:	99 27       	eor	r25, r25
 1a4:	87 fd       	sbrc	r24, 7
 1a6:	90 95       	com	r25
 1a8:	9c 01       	movw	r18, r24
 1aa:	99 23       	and	r25, r25
 1ac:	24 f4       	brge	.+8      	; 0x1b6 <get_joystick_direction+0x16>
 1ae:	22 27       	eor	r18, r18
 1b0:	33 27       	eor	r19, r19
 1b2:	28 1b       	sub	r18, r24
 1b4:	39 0b       	sbc	r19, r25
 1b6:	a9 01       	movw	r20, r18
	
	int8_t signed_joyst_coord_X, signed_joyst_coord_Y;
	uint8_t abs_signed_joyst_coord_X, abs_signed_joyst_coord_Y;
	
	signed_joyst_coord_X = joyst_coord_X - 128; //joystickCalibration.x_offset;
	signed_joyst_coord_Y = joyst_coord_Y - 128; //joystickCalibration.y_offset;
 1b8:	60 58       	subi	r22, 0x80	; 128
	abs_signed_joyst_coord_X = abs(signed_joyst_coord_X);
	abs_signed_joyst_coord_Y = abs(signed_joyst_coord_Y);
 1ba:	77 27       	eor	r23, r23
 1bc:	67 fd       	sbrc	r22, 7
 1be:	70 95       	com	r23
 1c0:	9b 01       	movw	r18, r22
 1c2:	77 23       	and	r23, r23
 1c4:	24 f4       	brge	.+8      	; 0x1ce <get_joystick_direction+0x2e>
 1c6:	22 27       	eor	r18, r18
 1c8:	33 27       	eor	r19, r19
 1ca:	26 1b       	sub	r18, r22
 1cc:	37 0b       	sbc	r19, r23
	
	
	
	if (abs_signed_joyst_coord_X <= JOYSTICK_THRESOLD && abs_signed_joyst_coord_Y <= JOYSTICK_THRESOLD){
 1ce:	4a 31       	cpi	r20, 0x1A	; 26
 1d0:	10 f4       	brcc	.+4      	; 0x1d6 <get_joystick_direction+0x36>
 1d2:	2a 31       	cpi	r18, 0x1A	; 26
 1d4:	80 f0       	brcs	.+32     	; 0x1f6 <get_joystick_direction+0x56>
		return CENTER;
	}
	
	if (signed_joyst_coord_X > abs_signed_joyst_coord_Y )
 1d6:	33 27       	eor	r19, r19
 1d8:	28 17       	cp	r18, r24
 1da:	39 07       	cpc	r19, r25
 1dc:	74 f0       	brlt	.+28     	; 0x1fa <get_joystick_direction+0x5a>
	return RIGHT;
	else if (signed_joyst_coord_X < - abs_signed_joyst_coord_Y)
 1de:	31 95       	neg	r19
 1e0:	21 95       	neg	r18
 1e2:	31 09       	sbc	r19, r1
 1e4:	82 17       	cp	r24, r18
 1e6:	93 07       	cpc	r25, r19
 1e8:	54 f0       	brlt	.+20     	; 0x1fe <get_joystick_direction+0x5e>
	return LEFT;
	else if (signed_joyst_coord_Y > abs_signed_joyst_coord_X)
 1ea:	55 27       	eor	r21, r21
 1ec:	46 17       	cp	r20, r22
 1ee:	57 07       	cpc	r21, r23
 1f0:	44 f4       	brge	.+16     	; 0x202 <get_joystick_direction+0x62>
	return UP;
 1f2:	84 e0       	ldi	r24, 0x04	; 4
 1f4:	08 95       	ret
	abs_signed_joyst_coord_Y = abs(signed_joyst_coord_Y);
	
	
	
	if (abs_signed_joyst_coord_X <= JOYSTICK_THRESOLD && abs_signed_joyst_coord_Y <= JOYSTICK_THRESOLD){
		return CENTER;
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	08 95       	ret
	}
	
	if (signed_joyst_coord_X > abs_signed_joyst_coord_Y )
	return RIGHT;
 1fa:	82 e0       	ldi	r24, 0x02	; 2
 1fc:	08 95       	ret
	else if (signed_joyst_coord_X < - abs_signed_joyst_coord_Y)
	return LEFT;
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	08 95       	ret
	else if (signed_joyst_coord_Y > abs_signed_joyst_coord_X)
	return UP;
	else
	return DOWN;
 202:	83 e0       	ldi	r24, 0x03	; 3
	
}
 204:	08 95       	ret

00000206 <joystickCalibrate>:

// When joystick is centered the measured center value will be the offset
void joystickCalibrate( void )
{
	
	joystickCalibration.x_offset = getADCdata(CHANNEL4); //X axis on channel 4
 206:	83 e0       	ldi	r24, 0x03	; 3
 208:	0e 94 a3 00 	call	0x146	; 0x146 <getADCdata>
 20c:	80 93 34 02 	sts	0x0234, r24
	joystickCalibration.y_offset = getADCdata(CHANNEL3); //Y axis on channel 3
 210:	82 e0       	ldi	r24, 0x02	; 2
 212:	0e 94 a3 00 	call	0x146	; 0x146 <getADCdata>
 216:	80 93 35 02 	sts	0x0235, r24
 21a:	08 95       	ret

0000021c <joystickDriver>:
	
}

void joystickDriver()
{
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
	uint8_t x_axis;
	uint8_t y_axis;
	x_axis = getADCdata(CHANNEL4); //X axis on channel 4
 220:	83 e0       	ldi	r24, 0x03	; 3
 222:	0e 94 a3 00 	call	0x146	; 0x146 <getADCdata>
 226:	d8 2f       	mov	r29, r24
	y_axis = getADCdata(CHANNEL3); //Y axis on channel 3
 228:	82 e0       	ldi	r24, 0x02	; 2
 22a:	0e 94 a3 00 	call	0x146	; 0x146 <getADCdata>
 22e:	c8 2f       	mov	r28, r24
	
	
	joystick_direction_t joyst_direction; //The value should be: CENTER/LEFT/RIGHT/DOWN/UP
	joyst_direction = get_joystick_direction(x_axis, y_axis);
 230:	68 2f       	mov	r22, r24
 232:	8d 2f       	mov	r24, r29
 234:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <get_joystick_direction>
	
	
	switch(joyst_direction){
 238:	82 30       	cpi	r24, 0x02	; 2
 23a:	e9 f0       	breq	.+58     	; 0x276 <joystickDriver+0x5a>
 23c:	28 f4       	brcc	.+10     	; 0x248 <joystickDriver+0x2c>
 23e:	88 23       	and	r24, r24
 240:	41 f0       	breq	.+16     	; 0x252 <joystickDriver+0x36>
 242:	81 30       	cpi	r24, 0x01	; 1
 244:	79 f0       	breq	.+30     	; 0x264 <joystickDriver+0x48>
 246:	32 c0       	rjmp	.+100    	; 0x2ac <joystickDriver+0x90>
 248:	83 30       	cpi	r24, 0x03	; 3
 24a:	f1 f0       	breq	.+60     	; 0x288 <joystickDriver+0x6c>
 24c:	84 30       	cpi	r24, 0x04	; 4
 24e:	29 f1       	breq	.+74     	; 0x29a <joystickDriver+0x7e>
 250:	2d c0       	rjmp	.+90     	; 0x2ac <joystickDriver+0x90>
		case CENTER:
		printf("CENTER\n\r");
 252:	21 e4       	ldi	r18, 0x41	; 65
 254:	31 e0       	ldi	r19, 0x01	; 1
 256:	3f 93       	push	r19
 258:	2f 93       	push	r18
 25a:	0e 94 0d 02 	call	0x41a	; 0x41a <printf>
		break;
 25e:	0f 90       	pop	r0
 260:	0f 90       	pop	r0
 262:	2c c0       	rjmp	.+88     	; 0x2bc <joystickDriver+0xa0>
		case LEFT:
		printf("LEFT\n\r");
 264:	2a e4       	ldi	r18, 0x4A	; 74
 266:	31 e0       	ldi	r19, 0x01	; 1
 268:	3f 93       	push	r19
 26a:	2f 93       	push	r18
 26c:	0e 94 0d 02 	call	0x41a	; 0x41a <printf>
		break;
 270:	0f 90       	pop	r0
 272:	0f 90       	pop	r0
 274:	23 c0       	rjmp	.+70     	; 0x2bc <joystickDriver+0xa0>
		case RIGHT:
		printf("RIGHT\n\r");
 276:	21 e5       	ldi	r18, 0x51	; 81
 278:	31 e0       	ldi	r19, 0x01	; 1
 27a:	3f 93       	push	r19
 27c:	2f 93       	push	r18
 27e:	0e 94 0d 02 	call	0x41a	; 0x41a <printf>
		break;
 282:	0f 90       	pop	r0
 284:	0f 90       	pop	r0
 286:	1a c0       	rjmp	.+52     	; 0x2bc <joystickDriver+0xa0>
		case DOWN:
		printf("DOWN\n\r");
 288:	29 e5       	ldi	r18, 0x59	; 89
 28a:	31 e0       	ldi	r19, 0x01	; 1
 28c:	3f 93       	push	r19
 28e:	2f 93       	push	r18
 290:	0e 94 0d 02 	call	0x41a	; 0x41a <printf>
		break;
 294:	0f 90       	pop	r0
 296:	0f 90       	pop	r0
 298:	11 c0       	rjmp	.+34     	; 0x2bc <joystickDriver+0xa0>
		case UP:
		printf("UP\n\r");
 29a:	2b eb       	ldi	r18, 0xBB	; 187
 29c:	31 e0       	ldi	r19, 0x01	; 1
 29e:	3f 93       	push	r19
 2a0:	2f 93       	push	r18
 2a2:	0e 94 0d 02 	call	0x41a	; 0x41a <printf>
		break;
 2a6:	0f 90       	pop	r0
 2a8:	0f 90       	pop	r0
 2aa:	08 c0       	rjmp	.+16     	; 0x2bc <joystickDriver+0xa0>
		default:
		printf("The function get_joystick_direction is not returning none of these: CENTER/LEFT/RIGHT/DOWN/UP\n\r");
 2ac:	20 e6       	ldi	r18, 0x60	; 96
 2ae:	31 e0       	ldi	r19, 0x01	; 1
 2b0:	3f 93       	push	r19
 2b2:	2f 93       	push	r18
 2b4:	0e 94 0d 02 	call	0x41a	; 0x41a <printf>
 2b8:	0f 90       	pop	r0
 2ba:	0f 90       	pop	r0
				
	}
	printf("Joystick X = %d \n\r", x_axis);
 2bc:	1f 92       	push	r1
 2be:	df 93       	push	r29
 2c0:	20 ec       	ldi	r18, 0xC0	; 192
 2c2:	31 e0       	ldi	r19, 0x01	; 1
 2c4:	3f 93       	push	r19
 2c6:	2f 93       	push	r18
 2c8:	0e 94 0d 02 	call	0x41a	; 0x41a <printf>
	printf("Joystick Y = %d \n\r", y_axis);
 2cc:	1f 92       	push	r1
 2ce:	cf 93       	push	r28
 2d0:	83 ed       	ldi	r24, 0xD3	; 211
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	9f 93       	push	r25
 2d6:	8f 93       	push	r24
 2d8:	0e 94 0d 02 	call	0x41a	; 0x41a <printf>
 2dc:	8d b7       	in	r24, 0x3d	; 61
 2de:	9e b7       	in	r25, 0x3e	; 62
 2e0:	08 96       	adiw	r24, 0x08	; 8
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	f8 94       	cli
 2e6:	9e bf       	out	0x3e, r25	; 62
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	8d bf       	out	0x3d, r24	; 61
}
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	08 95       	ret

000002f2 <main>:



int main(void) 
{
		USART_Init ( MYUBRR );
 2f2:	8f e1       	ldi	r24, 0x1F	; 31
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 5f 00 	call	0xbe	; 0xbe <USART_Init>
		fdevopen(&USART_Transmit, &USART_Receive);
 2fa:	67 e5       	ldi	r22, 0x57	; 87
 2fc:	70 e0       	ldi	r23, 0x00	; 0
 2fe:	8b e5       	ldi	r24, 0x5B	; 91
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 c2 01 	call	0x384	; 0x384 <fdevopen>
		ExernalMemoryInit();
 306:	0e 94 66 00 	call	0xcc	; 0xcc <ExernalMemoryInit>
		adcInit();
 30a:	0e 94 6d 00 	call	0xda	; 0xda <adcInit>
		
		joystickCalibrate();
 30e:	0e 94 03 01 	call	0x206	; 0x206 <joystickCalibrate>
		
		printf("Start Test");
 312:	86 ee       	ldi	r24, 0xE6	; 230
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	9f 93       	push	r25
 318:	8f 93       	push	r24
 31a:	0e 94 0d 02 	call	0x41a	; 0x41a <printf>
 31e:	0f 90       	pop	r0
 320:	0f 90       	pop	r0
		
    while(1)
    {
		if(PIND&0x04)
		{
			printf("Left button WORKS!\n\r");
 322:	0f 2e       	mov	r0, r31
 324:	f1 ef       	ldi	r31, 0xF1	; 241
 326:	ef 2e       	mov	r14, r31
 328:	f1 e0       	ldi	r31, 0x01	; 1
 32a:	ff 2e       	mov	r15, r31
 32c:	f0 2d       	mov	r31, r0
		}
		if(PIND&0x08)
		{
			printf("Right button WORKS!\n\r");
 32e:	06 e0       	ldi	r16, 0x06	; 6
 330:	12 e0       	ldi	r17, 0x02	; 2
		}
		if(!PINB&0x01)
		{
			printf("Center button WORKS!\n\r");
 332:	cc e1       	ldi	r28, 0x1C	; 28
 334:	d2 e0       	ldi	r29, 0x02	; 2
		
		printf("Start Test");
		
    while(1)
    {
		if(PIND&0x04)
 336:	82 9b       	sbis	0x10, 2	; 16
 338:	06 c0       	rjmp	.+12     	; 0x346 <main+0x54>
		{
			printf("Left button WORKS!\n\r");
 33a:	ff 92       	push	r15
 33c:	ef 92       	push	r14
 33e:	0e 94 0d 02 	call	0x41a	; 0x41a <printf>
 342:	0f 90       	pop	r0
 344:	0f 90       	pop	r0
		}
		if(PIND&0x08)
 346:	83 9b       	sbis	0x10, 3	; 16
 348:	06 c0       	rjmp	.+12     	; 0x356 <main+0x64>
		{
			printf("Right button WORKS!\n\r");
 34a:	1f 93       	push	r17
 34c:	0f 93       	push	r16
 34e:	0e 94 0d 02 	call	0x41a	; 0x41a <printf>
 352:	0f 90       	pop	r0
 354:	0f 90       	pop	r0
		}
		if(!PINB&0x01)
 356:	86 b3       	in	r24, 0x16	; 22
 358:	81 11       	cpse	r24, r1
 35a:	06 c0       	rjmp	.+12     	; 0x368 <main+0x76>
		{
			printf("Center button WORKS!\n\r");
 35c:	df 93       	push	r29
 35e:	cf 93       	push	r28
 360:	0e 94 0d 02 	call	0x41a	; 0x41a <printf>
 364:	0f 90       	pop	r0
 366:	0f 90       	pop	r0
		}	
		
		joystickDriver();	
 368:	0e 94 0e 01 	call	0x21c	; 0x21c <joystickDriver>
		sliderDriver();
 36c:	0e 94 b1 00 	call	0x162	; 0x162 <sliderDriver>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 370:	9f ef       	ldi	r25, 0xFF	; 255
 372:	2f e7       	ldi	r18, 0x7F	; 127
 374:	87 e0       	ldi	r24, 0x07	; 7
 376:	91 50       	subi	r25, 0x01	; 1
 378:	20 40       	sbci	r18, 0x00	; 0
 37a:	80 40       	sbci	r24, 0x00	; 0
 37c:	e1 f7       	brne	.-8      	; 0x376 <main+0x84>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <main+0x8e>
 380:	00 00       	nop
 382:	d9 cf       	rjmp	.-78     	; 0x336 <main+0x44>

00000384 <fdevopen>:
 384:	0f 93       	push	r16
 386:	1f 93       	push	r17
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	ec 01       	movw	r28, r24
 38e:	8b 01       	movw	r16, r22
 390:	00 97       	sbiw	r24, 0x00	; 0
 392:	31 f4       	brne	.+12     	; 0x3a0 <fdevopen+0x1c>
 394:	61 15       	cp	r22, r1
 396:	71 05       	cpc	r23, r1
 398:	19 f4       	brne	.+6      	; 0x3a0 <fdevopen+0x1c>
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	38 c0       	rjmp	.+112    	; 0x410 <fdevopen+0x8c>
 3a0:	6e e0       	ldi	r22, 0x0E	; 14
 3a2:	70 e0       	ldi	r23, 0x00	; 0
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <calloc>
 3ac:	fc 01       	movw	r30, r24
 3ae:	00 97       	sbiw	r24, 0x00	; 0
 3b0:	a1 f3       	breq	.-24     	; 0x39a <fdevopen+0x16>
 3b2:	80 e8       	ldi	r24, 0x80	; 128
 3b4:	83 83       	std	Z+3, r24	; 0x03
 3b6:	01 15       	cp	r16, r1
 3b8:	11 05       	cpc	r17, r1
 3ba:	71 f0       	breq	.+28     	; 0x3d8 <fdevopen+0x54>
 3bc:	13 87       	std	Z+11, r17	; 0x0b
 3be:	02 87       	std	Z+10, r16	; 0x0a
 3c0:	81 e8       	ldi	r24, 0x81	; 129
 3c2:	83 83       	std	Z+3, r24	; 0x03
 3c4:	80 91 37 02 	lds	r24, 0x0237
 3c8:	90 91 38 02 	lds	r25, 0x0238
 3cc:	89 2b       	or	r24, r25
 3ce:	21 f4       	brne	.+8      	; 0x3d8 <fdevopen+0x54>
 3d0:	f0 93 38 02 	sts	0x0238, r31
 3d4:	e0 93 37 02 	sts	0x0237, r30
 3d8:	20 97       	sbiw	r28, 0x00	; 0
 3da:	c9 f0       	breq	.+50     	; 0x40e <fdevopen+0x8a>
 3dc:	d1 87       	std	Z+9, r29	; 0x09
 3de:	c0 87       	std	Z+8, r28	; 0x08
 3e0:	83 81       	ldd	r24, Z+3	; 0x03
 3e2:	82 60       	ori	r24, 0x02	; 2
 3e4:	83 83       	std	Z+3, r24	; 0x03
 3e6:	80 91 39 02 	lds	r24, 0x0239
 3ea:	90 91 3a 02 	lds	r25, 0x023A
 3ee:	89 2b       	or	r24, r25
 3f0:	71 f4       	brne	.+28     	; 0x40e <fdevopen+0x8a>
 3f2:	f0 93 3a 02 	sts	0x023A, r31
 3f6:	e0 93 39 02 	sts	0x0239, r30
 3fa:	80 91 3b 02 	lds	r24, 0x023B
 3fe:	90 91 3c 02 	lds	r25, 0x023C
 402:	89 2b       	or	r24, r25
 404:	21 f4       	brne	.+8      	; 0x40e <fdevopen+0x8a>
 406:	f0 93 3c 02 	sts	0x023C, r31
 40a:	e0 93 3b 02 	sts	0x023B, r30
 40e:	cf 01       	movw	r24, r30
 410:	df 91       	pop	r29
 412:	cf 91       	pop	r28
 414:	1f 91       	pop	r17
 416:	0f 91       	pop	r16
 418:	08 95       	ret

0000041a <printf>:
 41a:	a0 e0       	ldi	r26, 0x00	; 0
 41c:	b0 e0       	ldi	r27, 0x00	; 0
 41e:	e3 e1       	ldi	r30, 0x13	; 19
 420:	f2 e0       	ldi	r31, 0x02	; 2
 422:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__prologue_saves__+0x20>
 426:	fe 01       	movw	r30, r28
 428:	35 96       	adiw	r30, 0x05	; 5
 42a:	61 91       	ld	r22, Z+
 42c:	71 91       	ld	r23, Z+
 42e:	af 01       	movw	r20, r30
 430:	80 91 39 02 	lds	r24, 0x0239
 434:	90 91 3a 02 	lds	r25, 0x023A
 438:	0e 94 21 02 	call	0x442	; 0x442 <vfprintf>
 43c:	e2 e0       	ldi	r30, 0x02	; 2
 43e:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__epilogue_restores__+0x20>

00000442 <vfprintf>:
 442:	ac e0       	ldi	r26, 0x0C	; 12
 444:	b0 e0       	ldi	r27, 0x00	; 0
 446:	e7 e2       	ldi	r30, 0x27	; 39
 448:	f2 e0       	ldi	r31, 0x02	; 2
 44a:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__prologue_saves__>
 44e:	7c 01       	movw	r14, r24
 450:	6b 01       	movw	r12, r22
 452:	8a 01       	movw	r16, r20
 454:	fc 01       	movw	r30, r24
 456:	17 82       	std	Z+7, r1	; 0x07
 458:	16 82       	std	Z+6, r1	; 0x06
 45a:	83 81       	ldd	r24, Z+3	; 0x03
 45c:	81 ff       	sbrs	r24, 1
 45e:	bd c1       	rjmp	.+890    	; 0x7da <__stack+0x2db>
 460:	ce 01       	movw	r24, r28
 462:	01 96       	adiw	r24, 0x01	; 1
 464:	4c 01       	movw	r8, r24
 466:	f7 01       	movw	r30, r14
 468:	93 81       	ldd	r25, Z+3	; 0x03
 46a:	f6 01       	movw	r30, r12
 46c:	93 fd       	sbrc	r25, 3
 46e:	85 91       	lpm	r24, Z+
 470:	93 ff       	sbrs	r25, 3
 472:	81 91       	ld	r24, Z+
 474:	6f 01       	movw	r12, r30
 476:	88 23       	and	r24, r24
 478:	09 f4       	brne	.+2      	; 0x47c <vfprintf+0x3a>
 47a:	ab c1       	rjmp	.+854    	; 0x7d2 <__stack+0x2d3>
 47c:	85 32       	cpi	r24, 0x25	; 37
 47e:	39 f4       	brne	.+14     	; 0x48e <vfprintf+0x4c>
 480:	93 fd       	sbrc	r25, 3
 482:	85 91       	lpm	r24, Z+
 484:	93 ff       	sbrs	r25, 3
 486:	81 91       	ld	r24, Z+
 488:	6f 01       	movw	r12, r30
 48a:	85 32       	cpi	r24, 0x25	; 37
 48c:	29 f4       	brne	.+10     	; 0x498 <vfprintf+0x56>
 48e:	b7 01       	movw	r22, r14
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	0e 94 53 05 	call	0xaa6	; 0xaa6 <fputc>
 496:	e7 cf       	rjmp	.-50     	; 0x466 <vfprintf+0x24>
 498:	51 2c       	mov	r5, r1
 49a:	31 2c       	mov	r3, r1
 49c:	20 e0       	ldi	r18, 0x00	; 0
 49e:	20 32       	cpi	r18, 0x20	; 32
 4a0:	a0 f4       	brcc	.+40     	; 0x4ca <vfprintf+0x88>
 4a2:	8b 32       	cpi	r24, 0x2B	; 43
 4a4:	69 f0       	breq	.+26     	; 0x4c0 <vfprintf+0x7e>
 4a6:	30 f4       	brcc	.+12     	; 0x4b4 <vfprintf+0x72>
 4a8:	80 32       	cpi	r24, 0x20	; 32
 4aa:	59 f0       	breq	.+22     	; 0x4c2 <vfprintf+0x80>
 4ac:	83 32       	cpi	r24, 0x23	; 35
 4ae:	69 f4       	brne	.+26     	; 0x4ca <vfprintf+0x88>
 4b0:	20 61       	ori	r18, 0x10	; 16
 4b2:	2c c0       	rjmp	.+88     	; 0x50c <__stack+0xd>
 4b4:	8d 32       	cpi	r24, 0x2D	; 45
 4b6:	39 f0       	breq	.+14     	; 0x4c6 <vfprintf+0x84>
 4b8:	80 33       	cpi	r24, 0x30	; 48
 4ba:	39 f4       	brne	.+14     	; 0x4ca <vfprintf+0x88>
 4bc:	21 60       	ori	r18, 0x01	; 1
 4be:	26 c0       	rjmp	.+76     	; 0x50c <__stack+0xd>
 4c0:	22 60       	ori	r18, 0x02	; 2
 4c2:	24 60       	ori	r18, 0x04	; 4
 4c4:	23 c0       	rjmp	.+70     	; 0x50c <__stack+0xd>
 4c6:	28 60       	ori	r18, 0x08	; 8
 4c8:	21 c0       	rjmp	.+66     	; 0x50c <__stack+0xd>
 4ca:	27 fd       	sbrc	r18, 7
 4cc:	27 c0       	rjmp	.+78     	; 0x51c <__stack+0x1d>
 4ce:	30 ed       	ldi	r19, 0xD0	; 208
 4d0:	38 0f       	add	r19, r24
 4d2:	3a 30       	cpi	r19, 0x0A	; 10
 4d4:	78 f4       	brcc	.+30     	; 0x4f4 <vfprintf+0xb2>
 4d6:	26 ff       	sbrs	r18, 6
 4d8:	06 c0       	rjmp	.+12     	; 0x4e6 <vfprintf+0xa4>
 4da:	fa e0       	ldi	r31, 0x0A	; 10
 4dc:	5f 9e       	mul	r5, r31
 4de:	30 0d       	add	r19, r0
 4e0:	11 24       	eor	r1, r1
 4e2:	53 2e       	mov	r5, r19
 4e4:	13 c0       	rjmp	.+38     	; 0x50c <__stack+0xd>
 4e6:	8a e0       	ldi	r24, 0x0A	; 10
 4e8:	38 9e       	mul	r3, r24
 4ea:	30 0d       	add	r19, r0
 4ec:	11 24       	eor	r1, r1
 4ee:	33 2e       	mov	r3, r19
 4f0:	20 62       	ori	r18, 0x20	; 32
 4f2:	0c c0       	rjmp	.+24     	; 0x50c <__stack+0xd>
 4f4:	8e 32       	cpi	r24, 0x2E	; 46
 4f6:	21 f4       	brne	.+8      	; 0x500 <__stack+0x1>
 4f8:	26 fd       	sbrc	r18, 6
 4fa:	6b c1       	rjmp	.+726    	; 0x7d2 <__stack+0x2d3>
 4fc:	20 64       	ori	r18, 0x40	; 64
 4fe:	06 c0       	rjmp	.+12     	; 0x50c <__stack+0xd>
 500:	8c 36       	cpi	r24, 0x6C	; 108
 502:	11 f4       	brne	.+4      	; 0x508 <__stack+0x9>
 504:	20 68       	ori	r18, 0x80	; 128
 506:	02 c0       	rjmp	.+4      	; 0x50c <__stack+0xd>
 508:	88 36       	cpi	r24, 0x68	; 104
 50a:	41 f4       	brne	.+16     	; 0x51c <__stack+0x1d>
 50c:	f6 01       	movw	r30, r12
 50e:	93 fd       	sbrc	r25, 3
 510:	85 91       	lpm	r24, Z+
 512:	93 ff       	sbrs	r25, 3
 514:	81 91       	ld	r24, Z+
 516:	6f 01       	movw	r12, r30
 518:	81 11       	cpse	r24, r1
 51a:	c1 cf       	rjmp	.-126    	; 0x49e <vfprintf+0x5c>
 51c:	98 2f       	mov	r25, r24
 51e:	9f 7d       	andi	r25, 0xDF	; 223
 520:	95 54       	subi	r25, 0x45	; 69
 522:	93 30       	cpi	r25, 0x03	; 3
 524:	28 f4       	brcc	.+10     	; 0x530 <__stack+0x31>
 526:	0c 5f       	subi	r16, 0xFC	; 252
 528:	1f 4f       	sbci	r17, 0xFF	; 255
 52a:	ff e3       	ldi	r31, 0x3F	; 63
 52c:	f9 83       	std	Y+1, r31	; 0x01
 52e:	0d c0       	rjmp	.+26     	; 0x54a <__stack+0x4b>
 530:	83 36       	cpi	r24, 0x63	; 99
 532:	31 f0       	breq	.+12     	; 0x540 <__stack+0x41>
 534:	83 37       	cpi	r24, 0x73	; 115
 536:	71 f0       	breq	.+28     	; 0x554 <__stack+0x55>
 538:	83 35       	cpi	r24, 0x53	; 83
 53a:	09 f0       	breq	.+2      	; 0x53e <__stack+0x3f>
 53c:	5b c0       	rjmp	.+182    	; 0x5f4 <__stack+0xf5>
 53e:	22 c0       	rjmp	.+68     	; 0x584 <__stack+0x85>
 540:	f8 01       	movw	r30, r16
 542:	80 81       	ld	r24, Z
 544:	89 83       	std	Y+1, r24	; 0x01
 546:	0e 5f       	subi	r16, 0xFE	; 254
 548:	1f 4f       	sbci	r17, 0xFF	; 255
 54a:	44 24       	eor	r4, r4
 54c:	43 94       	inc	r4
 54e:	51 2c       	mov	r5, r1
 550:	54 01       	movw	r10, r8
 552:	15 c0       	rjmp	.+42     	; 0x57e <__stack+0x7f>
 554:	38 01       	movw	r6, r16
 556:	f2 e0       	ldi	r31, 0x02	; 2
 558:	6f 0e       	add	r6, r31
 55a:	71 1c       	adc	r7, r1
 55c:	f8 01       	movw	r30, r16
 55e:	a0 80       	ld	r10, Z
 560:	b1 80       	ldd	r11, Z+1	; 0x01
 562:	26 ff       	sbrs	r18, 6
 564:	03 c0       	rjmp	.+6      	; 0x56c <__stack+0x6d>
 566:	65 2d       	mov	r22, r5
 568:	70 e0       	ldi	r23, 0x00	; 0
 56a:	02 c0       	rjmp	.+4      	; 0x570 <__stack+0x71>
 56c:	6f ef       	ldi	r22, 0xFF	; 255
 56e:	7f ef       	ldi	r23, 0xFF	; 255
 570:	c5 01       	movw	r24, r10
 572:	2c 87       	std	Y+12, r18	; 0x0c
 574:	0e 94 48 05 	call	0xa90	; 0xa90 <strnlen>
 578:	2c 01       	movw	r4, r24
 57a:	83 01       	movw	r16, r6
 57c:	2c 85       	ldd	r18, Y+12	; 0x0c
 57e:	2f 77       	andi	r18, 0x7F	; 127
 580:	22 2e       	mov	r2, r18
 582:	17 c0       	rjmp	.+46     	; 0x5b2 <__stack+0xb3>
 584:	38 01       	movw	r6, r16
 586:	f2 e0       	ldi	r31, 0x02	; 2
 588:	6f 0e       	add	r6, r31
 58a:	71 1c       	adc	r7, r1
 58c:	f8 01       	movw	r30, r16
 58e:	a0 80       	ld	r10, Z
 590:	b1 80       	ldd	r11, Z+1	; 0x01
 592:	26 ff       	sbrs	r18, 6
 594:	03 c0       	rjmp	.+6      	; 0x59c <__stack+0x9d>
 596:	65 2d       	mov	r22, r5
 598:	70 e0       	ldi	r23, 0x00	; 0
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <__stack+0xa1>
 59c:	6f ef       	ldi	r22, 0xFF	; 255
 59e:	7f ef       	ldi	r23, 0xFF	; 255
 5a0:	c5 01       	movw	r24, r10
 5a2:	2c 87       	std	Y+12, r18	; 0x0c
 5a4:	0e 94 36 05 	call	0xa6c	; 0xa6c <strnlen_P>
 5a8:	2c 01       	movw	r4, r24
 5aa:	2c 85       	ldd	r18, Y+12	; 0x0c
 5ac:	20 68       	ori	r18, 0x80	; 128
 5ae:	22 2e       	mov	r2, r18
 5b0:	83 01       	movw	r16, r6
 5b2:	23 fc       	sbrc	r2, 3
 5b4:	1b c0       	rjmp	.+54     	; 0x5ec <__stack+0xed>
 5b6:	83 2d       	mov	r24, r3
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	48 16       	cp	r4, r24
 5bc:	59 06       	cpc	r5, r25
 5be:	b0 f4       	brcc	.+44     	; 0x5ec <__stack+0xed>
 5c0:	b7 01       	movw	r22, r14
 5c2:	80 e2       	ldi	r24, 0x20	; 32
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	0e 94 53 05 	call	0xaa6	; 0xaa6 <fputc>
 5ca:	3a 94       	dec	r3
 5cc:	f4 cf       	rjmp	.-24     	; 0x5b6 <__stack+0xb7>
 5ce:	f5 01       	movw	r30, r10
 5d0:	27 fc       	sbrc	r2, 7
 5d2:	85 91       	lpm	r24, Z+
 5d4:	27 fe       	sbrs	r2, 7
 5d6:	81 91       	ld	r24, Z+
 5d8:	5f 01       	movw	r10, r30
 5da:	b7 01       	movw	r22, r14
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	0e 94 53 05 	call	0xaa6	; 0xaa6 <fputc>
 5e2:	31 10       	cpse	r3, r1
 5e4:	3a 94       	dec	r3
 5e6:	f1 e0       	ldi	r31, 0x01	; 1
 5e8:	4f 1a       	sub	r4, r31
 5ea:	51 08       	sbc	r5, r1
 5ec:	41 14       	cp	r4, r1
 5ee:	51 04       	cpc	r5, r1
 5f0:	71 f7       	brne	.-36     	; 0x5ce <__stack+0xcf>
 5f2:	e5 c0       	rjmp	.+458    	; 0x7be <__stack+0x2bf>
 5f4:	84 36       	cpi	r24, 0x64	; 100
 5f6:	11 f0       	breq	.+4      	; 0x5fc <__stack+0xfd>
 5f8:	89 36       	cpi	r24, 0x69	; 105
 5fa:	39 f5       	brne	.+78     	; 0x64a <__stack+0x14b>
 5fc:	f8 01       	movw	r30, r16
 5fe:	27 ff       	sbrs	r18, 7
 600:	07 c0       	rjmp	.+14     	; 0x610 <__stack+0x111>
 602:	60 81       	ld	r22, Z
 604:	71 81       	ldd	r23, Z+1	; 0x01
 606:	82 81       	ldd	r24, Z+2	; 0x02
 608:	93 81       	ldd	r25, Z+3	; 0x03
 60a:	0c 5f       	subi	r16, 0xFC	; 252
 60c:	1f 4f       	sbci	r17, 0xFF	; 255
 60e:	08 c0       	rjmp	.+16     	; 0x620 <__stack+0x121>
 610:	60 81       	ld	r22, Z
 612:	71 81       	ldd	r23, Z+1	; 0x01
 614:	88 27       	eor	r24, r24
 616:	77 fd       	sbrc	r23, 7
 618:	80 95       	com	r24
 61a:	98 2f       	mov	r25, r24
 61c:	0e 5f       	subi	r16, 0xFE	; 254
 61e:	1f 4f       	sbci	r17, 0xFF	; 255
 620:	2f 76       	andi	r18, 0x6F	; 111
 622:	b2 2e       	mov	r11, r18
 624:	97 ff       	sbrs	r25, 7
 626:	09 c0       	rjmp	.+18     	; 0x63a <__stack+0x13b>
 628:	90 95       	com	r25
 62a:	80 95       	com	r24
 62c:	70 95       	com	r23
 62e:	61 95       	neg	r22
 630:	7f 4f       	sbci	r23, 0xFF	; 255
 632:	8f 4f       	sbci	r24, 0xFF	; 255
 634:	9f 4f       	sbci	r25, 0xFF	; 255
 636:	20 68       	ori	r18, 0x80	; 128
 638:	b2 2e       	mov	r11, r18
 63a:	2a e0       	ldi	r18, 0x0A	; 10
 63c:	30 e0       	ldi	r19, 0x00	; 0
 63e:	a4 01       	movw	r20, r8
 640:	0e 94 85 05 	call	0xb0a	; 0xb0a <__ultoa_invert>
 644:	a8 2e       	mov	r10, r24
 646:	a8 18       	sub	r10, r8
 648:	44 c0       	rjmp	.+136    	; 0x6d2 <__stack+0x1d3>
 64a:	85 37       	cpi	r24, 0x75	; 117
 64c:	29 f4       	brne	.+10     	; 0x658 <__stack+0x159>
 64e:	2f 7e       	andi	r18, 0xEF	; 239
 650:	b2 2e       	mov	r11, r18
 652:	2a e0       	ldi	r18, 0x0A	; 10
 654:	30 e0       	ldi	r19, 0x00	; 0
 656:	25 c0       	rjmp	.+74     	; 0x6a2 <__stack+0x1a3>
 658:	f2 2f       	mov	r31, r18
 65a:	f9 7f       	andi	r31, 0xF9	; 249
 65c:	bf 2e       	mov	r11, r31
 65e:	8f 36       	cpi	r24, 0x6F	; 111
 660:	c1 f0       	breq	.+48     	; 0x692 <__stack+0x193>
 662:	18 f4       	brcc	.+6      	; 0x66a <__stack+0x16b>
 664:	88 35       	cpi	r24, 0x58	; 88
 666:	79 f0       	breq	.+30     	; 0x686 <__stack+0x187>
 668:	b4 c0       	rjmp	.+360    	; 0x7d2 <__stack+0x2d3>
 66a:	80 37       	cpi	r24, 0x70	; 112
 66c:	19 f0       	breq	.+6      	; 0x674 <__stack+0x175>
 66e:	88 37       	cpi	r24, 0x78	; 120
 670:	21 f0       	breq	.+8      	; 0x67a <__stack+0x17b>
 672:	af c0       	rjmp	.+350    	; 0x7d2 <__stack+0x2d3>
 674:	2f 2f       	mov	r18, r31
 676:	20 61       	ori	r18, 0x10	; 16
 678:	b2 2e       	mov	r11, r18
 67a:	b4 fe       	sbrs	r11, 4
 67c:	0d c0       	rjmp	.+26     	; 0x698 <__stack+0x199>
 67e:	8b 2d       	mov	r24, r11
 680:	84 60       	ori	r24, 0x04	; 4
 682:	b8 2e       	mov	r11, r24
 684:	09 c0       	rjmp	.+18     	; 0x698 <__stack+0x199>
 686:	24 ff       	sbrs	r18, 4
 688:	0a c0       	rjmp	.+20     	; 0x69e <__stack+0x19f>
 68a:	9f 2f       	mov	r25, r31
 68c:	96 60       	ori	r25, 0x06	; 6
 68e:	b9 2e       	mov	r11, r25
 690:	06 c0       	rjmp	.+12     	; 0x69e <__stack+0x19f>
 692:	28 e0       	ldi	r18, 0x08	; 8
 694:	30 e0       	ldi	r19, 0x00	; 0
 696:	05 c0       	rjmp	.+10     	; 0x6a2 <__stack+0x1a3>
 698:	20 e1       	ldi	r18, 0x10	; 16
 69a:	30 e0       	ldi	r19, 0x00	; 0
 69c:	02 c0       	rjmp	.+4      	; 0x6a2 <__stack+0x1a3>
 69e:	20 e1       	ldi	r18, 0x10	; 16
 6a0:	32 e0       	ldi	r19, 0x02	; 2
 6a2:	f8 01       	movw	r30, r16
 6a4:	b7 fe       	sbrs	r11, 7
 6a6:	07 c0       	rjmp	.+14     	; 0x6b6 <__stack+0x1b7>
 6a8:	60 81       	ld	r22, Z
 6aa:	71 81       	ldd	r23, Z+1	; 0x01
 6ac:	82 81       	ldd	r24, Z+2	; 0x02
 6ae:	93 81       	ldd	r25, Z+3	; 0x03
 6b0:	0c 5f       	subi	r16, 0xFC	; 252
 6b2:	1f 4f       	sbci	r17, 0xFF	; 255
 6b4:	06 c0       	rjmp	.+12     	; 0x6c2 <__stack+0x1c3>
 6b6:	60 81       	ld	r22, Z
 6b8:	71 81       	ldd	r23, Z+1	; 0x01
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	0e 5f       	subi	r16, 0xFE	; 254
 6c0:	1f 4f       	sbci	r17, 0xFF	; 255
 6c2:	a4 01       	movw	r20, r8
 6c4:	0e 94 85 05 	call	0xb0a	; 0xb0a <__ultoa_invert>
 6c8:	a8 2e       	mov	r10, r24
 6ca:	a8 18       	sub	r10, r8
 6cc:	fb 2d       	mov	r31, r11
 6ce:	ff 77       	andi	r31, 0x7F	; 127
 6d0:	bf 2e       	mov	r11, r31
 6d2:	b6 fe       	sbrs	r11, 6
 6d4:	0b c0       	rjmp	.+22     	; 0x6ec <__stack+0x1ed>
 6d6:	2b 2d       	mov	r18, r11
 6d8:	2e 7f       	andi	r18, 0xFE	; 254
 6da:	a5 14       	cp	r10, r5
 6dc:	50 f4       	brcc	.+20     	; 0x6f2 <__stack+0x1f3>
 6de:	b4 fe       	sbrs	r11, 4
 6e0:	0a c0       	rjmp	.+20     	; 0x6f6 <__stack+0x1f7>
 6e2:	b2 fc       	sbrc	r11, 2
 6e4:	08 c0       	rjmp	.+16     	; 0x6f6 <__stack+0x1f7>
 6e6:	2b 2d       	mov	r18, r11
 6e8:	2e 7e       	andi	r18, 0xEE	; 238
 6ea:	05 c0       	rjmp	.+10     	; 0x6f6 <__stack+0x1f7>
 6ec:	7a 2c       	mov	r7, r10
 6ee:	2b 2d       	mov	r18, r11
 6f0:	03 c0       	rjmp	.+6      	; 0x6f8 <__stack+0x1f9>
 6f2:	7a 2c       	mov	r7, r10
 6f4:	01 c0       	rjmp	.+2      	; 0x6f8 <__stack+0x1f9>
 6f6:	75 2c       	mov	r7, r5
 6f8:	24 ff       	sbrs	r18, 4
 6fa:	0d c0       	rjmp	.+26     	; 0x716 <__stack+0x217>
 6fc:	fe 01       	movw	r30, r28
 6fe:	ea 0d       	add	r30, r10
 700:	f1 1d       	adc	r31, r1
 702:	80 81       	ld	r24, Z
 704:	80 33       	cpi	r24, 0x30	; 48
 706:	11 f4       	brne	.+4      	; 0x70c <__stack+0x20d>
 708:	29 7e       	andi	r18, 0xE9	; 233
 70a:	09 c0       	rjmp	.+18     	; 0x71e <__stack+0x21f>
 70c:	22 ff       	sbrs	r18, 2
 70e:	06 c0       	rjmp	.+12     	; 0x71c <__stack+0x21d>
 710:	73 94       	inc	r7
 712:	73 94       	inc	r7
 714:	04 c0       	rjmp	.+8      	; 0x71e <__stack+0x21f>
 716:	82 2f       	mov	r24, r18
 718:	86 78       	andi	r24, 0x86	; 134
 71a:	09 f0       	breq	.+2      	; 0x71e <__stack+0x21f>
 71c:	73 94       	inc	r7
 71e:	23 fd       	sbrc	r18, 3
 720:	13 c0       	rjmp	.+38     	; 0x748 <__stack+0x249>
 722:	20 ff       	sbrs	r18, 0
 724:	06 c0       	rjmp	.+12     	; 0x732 <__stack+0x233>
 726:	5a 2c       	mov	r5, r10
 728:	73 14       	cp	r7, r3
 72a:	18 f4       	brcc	.+6      	; 0x732 <__stack+0x233>
 72c:	53 0c       	add	r5, r3
 72e:	57 18       	sub	r5, r7
 730:	73 2c       	mov	r7, r3
 732:	73 14       	cp	r7, r3
 734:	68 f4       	brcc	.+26     	; 0x750 <__stack+0x251>
 736:	b7 01       	movw	r22, r14
 738:	80 e2       	ldi	r24, 0x20	; 32
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	2c 87       	std	Y+12, r18	; 0x0c
 73e:	0e 94 53 05 	call	0xaa6	; 0xaa6 <fputc>
 742:	73 94       	inc	r7
 744:	2c 85       	ldd	r18, Y+12	; 0x0c
 746:	f5 cf       	rjmp	.-22     	; 0x732 <__stack+0x233>
 748:	73 14       	cp	r7, r3
 74a:	10 f4       	brcc	.+4      	; 0x750 <__stack+0x251>
 74c:	37 18       	sub	r3, r7
 74e:	01 c0       	rjmp	.+2      	; 0x752 <__stack+0x253>
 750:	31 2c       	mov	r3, r1
 752:	24 ff       	sbrs	r18, 4
 754:	12 c0       	rjmp	.+36     	; 0x77a <__stack+0x27b>
 756:	b7 01       	movw	r22, r14
 758:	80 e3       	ldi	r24, 0x30	; 48
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	2c 87       	std	Y+12, r18	; 0x0c
 75e:	0e 94 53 05 	call	0xaa6	; 0xaa6 <fputc>
 762:	2c 85       	ldd	r18, Y+12	; 0x0c
 764:	22 ff       	sbrs	r18, 2
 766:	17 c0       	rjmp	.+46     	; 0x796 <__stack+0x297>
 768:	21 ff       	sbrs	r18, 1
 76a:	03 c0       	rjmp	.+6      	; 0x772 <__stack+0x273>
 76c:	88 e5       	ldi	r24, 0x58	; 88
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	02 c0       	rjmp	.+4      	; 0x776 <__stack+0x277>
 772:	88 e7       	ldi	r24, 0x78	; 120
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	b7 01       	movw	r22, r14
 778:	0c c0       	rjmp	.+24     	; 0x792 <__stack+0x293>
 77a:	82 2f       	mov	r24, r18
 77c:	86 78       	andi	r24, 0x86	; 134
 77e:	59 f0       	breq	.+22     	; 0x796 <__stack+0x297>
 780:	21 fd       	sbrc	r18, 1
 782:	02 c0       	rjmp	.+4      	; 0x788 <__stack+0x289>
 784:	80 e2       	ldi	r24, 0x20	; 32
 786:	01 c0       	rjmp	.+2      	; 0x78a <__stack+0x28b>
 788:	8b e2       	ldi	r24, 0x2B	; 43
 78a:	27 fd       	sbrc	r18, 7
 78c:	8d e2       	ldi	r24, 0x2D	; 45
 78e:	b7 01       	movw	r22, r14
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	0e 94 53 05 	call	0xaa6	; 0xaa6 <fputc>
 796:	a5 14       	cp	r10, r5
 798:	38 f4       	brcc	.+14     	; 0x7a8 <__stack+0x2a9>
 79a:	b7 01       	movw	r22, r14
 79c:	80 e3       	ldi	r24, 0x30	; 48
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	0e 94 53 05 	call	0xaa6	; 0xaa6 <fputc>
 7a4:	5a 94       	dec	r5
 7a6:	f7 cf       	rjmp	.-18     	; 0x796 <__stack+0x297>
 7a8:	aa 94       	dec	r10
 7aa:	f4 01       	movw	r30, r8
 7ac:	ea 0d       	add	r30, r10
 7ae:	f1 1d       	adc	r31, r1
 7b0:	80 81       	ld	r24, Z
 7b2:	b7 01       	movw	r22, r14
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	0e 94 53 05 	call	0xaa6	; 0xaa6 <fputc>
 7ba:	a1 10       	cpse	r10, r1
 7bc:	f5 cf       	rjmp	.-22     	; 0x7a8 <__stack+0x2a9>
 7be:	33 20       	and	r3, r3
 7c0:	09 f4       	brne	.+2      	; 0x7c4 <__stack+0x2c5>
 7c2:	51 ce       	rjmp	.-862    	; 0x466 <vfprintf+0x24>
 7c4:	b7 01       	movw	r22, r14
 7c6:	80 e2       	ldi	r24, 0x20	; 32
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	0e 94 53 05 	call	0xaa6	; 0xaa6 <fputc>
 7ce:	3a 94       	dec	r3
 7d0:	f6 cf       	rjmp	.-20     	; 0x7be <__stack+0x2bf>
 7d2:	f7 01       	movw	r30, r14
 7d4:	86 81       	ldd	r24, Z+6	; 0x06
 7d6:	97 81       	ldd	r25, Z+7	; 0x07
 7d8:	02 c0       	rjmp	.+4      	; 0x7de <__stack+0x2df>
 7da:	8f ef       	ldi	r24, 0xFF	; 255
 7dc:	9f ef       	ldi	r25, 0xFF	; 255
 7de:	2c 96       	adiw	r28, 0x0c	; 12
 7e0:	e2 e1       	ldi	r30, 0x12	; 18
 7e2:	0c 94 ff 05 	jmp	0xbfe	; 0xbfe <__epilogue_restores__>

000007e6 <calloc>:
 7e6:	0f 93       	push	r16
 7e8:	1f 93       	push	r17
 7ea:	cf 93       	push	r28
 7ec:	df 93       	push	r29
 7ee:	86 9f       	mul	r24, r22
 7f0:	80 01       	movw	r16, r0
 7f2:	87 9f       	mul	r24, r23
 7f4:	10 0d       	add	r17, r0
 7f6:	96 9f       	mul	r25, r22
 7f8:	10 0d       	add	r17, r0
 7fa:	11 24       	eor	r1, r1
 7fc:	c8 01       	movw	r24, r16
 7fe:	0e 94 0f 04 	call	0x81e	; 0x81e <malloc>
 802:	ec 01       	movw	r28, r24
 804:	00 97       	sbiw	r24, 0x00	; 0
 806:	29 f0       	breq	.+10     	; 0x812 <calloc+0x2c>
 808:	a8 01       	movw	r20, r16
 80a:	60 e0       	ldi	r22, 0x00	; 0
 80c:	70 e0       	ldi	r23, 0x00	; 0
 80e:	0e 94 41 05 	call	0xa82	; 0xa82 <memset>
 812:	ce 01       	movw	r24, r28
 814:	df 91       	pop	r29
 816:	cf 91       	pop	r28
 818:	1f 91       	pop	r17
 81a:	0f 91       	pop	r16
 81c:	08 95       	ret

0000081e <malloc>:
 81e:	cf 93       	push	r28
 820:	df 93       	push	r29
 822:	82 30       	cpi	r24, 0x02	; 2
 824:	91 05       	cpc	r25, r1
 826:	10 f4       	brcc	.+4      	; 0x82c <malloc+0xe>
 828:	82 e0       	ldi	r24, 0x02	; 2
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	e0 91 3f 02 	lds	r30, 0x023F
 830:	f0 91 40 02 	lds	r31, 0x0240
 834:	20 e0       	ldi	r18, 0x00	; 0
 836:	30 e0       	ldi	r19, 0x00	; 0
 838:	a0 e0       	ldi	r26, 0x00	; 0
 83a:	b0 e0       	ldi	r27, 0x00	; 0
 83c:	30 97       	sbiw	r30, 0x00	; 0
 83e:	39 f1       	breq	.+78     	; 0x88e <malloc+0x70>
 840:	40 81       	ld	r20, Z
 842:	51 81       	ldd	r21, Z+1	; 0x01
 844:	48 17       	cp	r20, r24
 846:	59 07       	cpc	r21, r25
 848:	b8 f0       	brcs	.+46     	; 0x878 <malloc+0x5a>
 84a:	48 17       	cp	r20, r24
 84c:	59 07       	cpc	r21, r25
 84e:	71 f4       	brne	.+28     	; 0x86c <malloc+0x4e>
 850:	82 81       	ldd	r24, Z+2	; 0x02
 852:	93 81       	ldd	r25, Z+3	; 0x03
 854:	10 97       	sbiw	r26, 0x00	; 0
 856:	29 f0       	breq	.+10     	; 0x862 <malloc+0x44>
 858:	13 96       	adiw	r26, 0x03	; 3
 85a:	9c 93       	st	X, r25
 85c:	8e 93       	st	-X, r24
 85e:	12 97       	sbiw	r26, 0x02	; 2
 860:	2c c0       	rjmp	.+88     	; 0x8ba <malloc+0x9c>
 862:	90 93 40 02 	sts	0x0240, r25
 866:	80 93 3f 02 	sts	0x023F, r24
 86a:	27 c0       	rjmp	.+78     	; 0x8ba <malloc+0x9c>
 86c:	21 15       	cp	r18, r1
 86e:	31 05       	cpc	r19, r1
 870:	31 f0       	breq	.+12     	; 0x87e <malloc+0x60>
 872:	42 17       	cp	r20, r18
 874:	53 07       	cpc	r21, r19
 876:	18 f0       	brcs	.+6      	; 0x87e <malloc+0x60>
 878:	a9 01       	movw	r20, r18
 87a:	db 01       	movw	r26, r22
 87c:	01 c0       	rjmp	.+2      	; 0x880 <malloc+0x62>
 87e:	ef 01       	movw	r28, r30
 880:	9a 01       	movw	r18, r20
 882:	bd 01       	movw	r22, r26
 884:	df 01       	movw	r26, r30
 886:	02 80       	ldd	r0, Z+2	; 0x02
 888:	f3 81       	ldd	r31, Z+3	; 0x03
 88a:	e0 2d       	mov	r30, r0
 88c:	d7 cf       	rjmp	.-82     	; 0x83c <malloc+0x1e>
 88e:	21 15       	cp	r18, r1
 890:	31 05       	cpc	r19, r1
 892:	f9 f0       	breq	.+62     	; 0x8d2 <malloc+0xb4>
 894:	28 1b       	sub	r18, r24
 896:	39 0b       	sbc	r19, r25
 898:	24 30       	cpi	r18, 0x04	; 4
 89a:	31 05       	cpc	r19, r1
 89c:	80 f4       	brcc	.+32     	; 0x8be <malloc+0xa0>
 89e:	8a 81       	ldd	r24, Y+2	; 0x02
 8a0:	9b 81       	ldd	r25, Y+3	; 0x03
 8a2:	61 15       	cp	r22, r1
 8a4:	71 05       	cpc	r23, r1
 8a6:	21 f0       	breq	.+8      	; 0x8b0 <malloc+0x92>
 8a8:	fb 01       	movw	r30, r22
 8aa:	93 83       	std	Z+3, r25	; 0x03
 8ac:	82 83       	std	Z+2, r24	; 0x02
 8ae:	04 c0       	rjmp	.+8      	; 0x8b8 <malloc+0x9a>
 8b0:	90 93 40 02 	sts	0x0240, r25
 8b4:	80 93 3f 02 	sts	0x023F, r24
 8b8:	fe 01       	movw	r30, r28
 8ba:	32 96       	adiw	r30, 0x02	; 2
 8bc:	44 c0       	rjmp	.+136    	; 0x946 <malloc+0x128>
 8be:	fe 01       	movw	r30, r28
 8c0:	e2 0f       	add	r30, r18
 8c2:	f3 1f       	adc	r31, r19
 8c4:	81 93       	st	Z+, r24
 8c6:	91 93       	st	Z+, r25
 8c8:	22 50       	subi	r18, 0x02	; 2
 8ca:	31 09       	sbc	r19, r1
 8cc:	39 83       	std	Y+1, r19	; 0x01
 8ce:	28 83       	st	Y, r18
 8d0:	3a c0       	rjmp	.+116    	; 0x946 <malloc+0x128>
 8d2:	20 91 3d 02 	lds	r18, 0x023D
 8d6:	30 91 3e 02 	lds	r19, 0x023E
 8da:	23 2b       	or	r18, r19
 8dc:	41 f4       	brne	.+16     	; 0x8ee <malloc+0xd0>
 8de:	20 91 02 01 	lds	r18, 0x0102
 8e2:	30 91 03 01 	lds	r19, 0x0103
 8e6:	30 93 3e 02 	sts	0x023E, r19
 8ea:	20 93 3d 02 	sts	0x023D, r18
 8ee:	20 91 00 01 	lds	r18, 0x0100
 8f2:	30 91 01 01 	lds	r19, 0x0101
 8f6:	21 15       	cp	r18, r1
 8f8:	31 05       	cpc	r19, r1
 8fa:	41 f4       	brne	.+16     	; 0x90c <malloc+0xee>
 8fc:	2d b7       	in	r18, 0x3d	; 61
 8fe:	3e b7       	in	r19, 0x3e	; 62
 900:	40 91 04 01 	lds	r20, 0x0104
 904:	50 91 05 01 	lds	r21, 0x0105
 908:	24 1b       	sub	r18, r20
 90a:	35 0b       	sbc	r19, r21
 90c:	e0 91 3d 02 	lds	r30, 0x023D
 910:	f0 91 3e 02 	lds	r31, 0x023E
 914:	e2 17       	cp	r30, r18
 916:	f3 07       	cpc	r31, r19
 918:	a0 f4       	brcc	.+40     	; 0x942 <malloc+0x124>
 91a:	2e 1b       	sub	r18, r30
 91c:	3f 0b       	sbc	r19, r31
 91e:	28 17       	cp	r18, r24
 920:	39 07       	cpc	r19, r25
 922:	78 f0       	brcs	.+30     	; 0x942 <malloc+0x124>
 924:	ac 01       	movw	r20, r24
 926:	4e 5f       	subi	r20, 0xFE	; 254
 928:	5f 4f       	sbci	r21, 0xFF	; 255
 92a:	24 17       	cp	r18, r20
 92c:	35 07       	cpc	r19, r21
 92e:	48 f0       	brcs	.+18     	; 0x942 <malloc+0x124>
 930:	4e 0f       	add	r20, r30
 932:	5f 1f       	adc	r21, r31
 934:	50 93 3e 02 	sts	0x023E, r21
 938:	40 93 3d 02 	sts	0x023D, r20
 93c:	81 93       	st	Z+, r24
 93e:	91 93       	st	Z+, r25
 940:	02 c0       	rjmp	.+4      	; 0x946 <malloc+0x128>
 942:	e0 e0       	ldi	r30, 0x00	; 0
 944:	f0 e0       	ldi	r31, 0x00	; 0
 946:	cf 01       	movw	r24, r30
 948:	df 91       	pop	r29
 94a:	cf 91       	pop	r28
 94c:	08 95       	ret

0000094e <free>:
 94e:	cf 93       	push	r28
 950:	df 93       	push	r29
 952:	00 97       	sbiw	r24, 0x00	; 0
 954:	09 f4       	brne	.+2      	; 0x958 <free+0xa>
 956:	87 c0       	rjmp	.+270    	; 0xa66 <free+0x118>
 958:	fc 01       	movw	r30, r24
 95a:	32 97       	sbiw	r30, 0x02	; 2
 95c:	13 82       	std	Z+3, r1	; 0x03
 95e:	12 82       	std	Z+2, r1	; 0x02
 960:	c0 91 3f 02 	lds	r28, 0x023F
 964:	d0 91 40 02 	lds	r29, 0x0240
 968:	20 97       	sbiw	r28, 0x00	; 0
 96a:	81 f4       	brne	.+32     	; 0x98c <free+0x3e>
 96c:	20 81       	ld	r18, Z
 96e:	31 81       	ldd	r19, Z+1	; 0x01
 970:	28 0f       	add	r18, r24
 972:	39 1f       	adc	r19, r25
 974:	80 91 3d 02 	lds	r24, 0x023D
 978:	90 91 3e 02 	lds	r25, 0x023E
 97c:	82 17       	cp	r24, r18
 97e:	93 07       	cpc	r25, r19
 980:	79 f5       	brne	.+94     	; 0x9e0 <free+0x92>
 982:	f0 93 3e 02 	sts	0x023E, r31
 986:	e0 93 3d 02 	sts	0x023D, r30
 98a:	6d c0       	rjmp	.+218    	; 0xa66 <free+0x118>
 98c:	de 01       	movw	r26, r28
 98e:	20 e0       	ldi	r18, 0x00	; 0
 990:	30 e0       	ldi	r19, 0x00	; 0
 992:	ae 17       	cp	r26, r30
 994:	bf 07       	cpc	r27, r31
 996:	50 f4       	brcc	.+20     	; 0x9ac <free+0x5e>
 998:	12 96       	adiw	r26, 0x02	; 2
 99a:	4d 91       	ld	r20, X+
 99c:	5c 91       	ld	r21, X
 99e:	13 97       	sbiw	r26, 0x03	; 3
 9a0:	9d 01       	movw	r18, r26
 9a2:	41 15       	cp	r20, r1
 9a4:	51 05       	cpc	r21, r1
 9a6:	09 f1       	breq	.+66     	; 0x9ea <free+0x9c>
 9a8:	da 01       	movw	r26, r20
 9aa:	f3 cf       	rjmp	.-26     	; 0x992 <free+0x44>
 9ac:	b3 83       	std	Z+3, r27	; 0x03
 9ae:	a2 83       	std	Z+2, r26	; 0x02
 9b0:	40 81       	ld	r20, Z
 9b2:	51 81       	ldd	r21, Z+1	; 0x01
 9b4:	84 0f       	add	r24, r20
 9b6:	95 1f       	adc	r25, r21
 9b8:	8a 17       	cp	r24, r26
 9ba:	9b 07       	cpc	r25, r27
 9bc:	71 f4       	brne	.+28     	; 0x9da <free+0x8c>
 9be:	8d 91       	ld	r24, X+
 9c0:	9c 91       	ld	r25, X
 9c2:	11 97       	sbiw	r26, 0x01	; 1
 9c4:	84 0f       	add	r24, r20
 9c6:	95 1f       	adc	r25, r21
 9c8:	02 96       	adiw	r24, 0x02	; 2
 9ca:	91 83       	std	Z+1, r25	; 0x01
 9cc:	80 83       	st	Z, r24
 9ce:	12 96       	adiw	r26, 0x02	; 2
 9d0:	8d 91       	ld	r24, X+
 9d2:	9c 91       	ld	r25, X
 9d4:	13 97       	sbiw	r26, 0x03	; 3
 9d6:	93 83       	std	Z+3, r25	; 0x03
 9d8:	82 83       	std	Z+2, r24	; 0x02
 9da:	21 15       	cp	r18, r1
 9dc:	31 05       	cpc	r19, r1
 9de:	29 f4       	brne	.+10     	; 0x9ea <free+0x9c>
 9e0:	f0 93 40 02 	sts	0x0240, r31
 9e4:	e0 93 3f 02 	sts	0x023F, r30
 9e8:	3e c0       	rjmp	.+124    	; 0xa66 <free+0x118>
 9ea:	d9 01       	movw	r26, r18
 9ec:	13 96       	adiw	r26, 0x03	; 3
 9ee:	fc 93       	st	X, r31
 9f0:	ee 93       	st	-X, r30
 9f2:	12 97       	sbiw	r26, 0x02	; 2
 9f4:	4d 91       	ld	r20, X+
 9f6:	5d 91       	ld	r21, X+
 9f8:	a4 0f       	add	r26, r20
 9fa:	b5 1f       	adc	r27, r21
 9fc:	ea 17       	cp	r30, r26
 9fe:	fb 07       	cpc	r31, r27
 a00:	79 f4       	brne	.+30     	; 0xa20 <free+0xd2>
 a02:	80 81       	ld	r24, Z
 a04:	91 81       	ldd	r25, Z+1	; 0x01
 a06:	84 0f       	add	r24, r20
 a08:	95 1f       	adc	r25, r21
 a0a:	02 96       	adiw	r24, 0x02	; 2
 a0c:	d9 01       	movw	r26, r18
 a0e:	11 96       	adiw	r26, 0x01	; 1
 a10:	9c 93       	st	X, r25
 a12:	8e 93       	st	-X, r24
 a14:	82 81       	ldd	r24, Z+2	; 0x02
 a16:	93 81       	ldd	r25, Z+3	; 0x03
 a18:	13 96       	adiw	r26, 0x03	; 3
 a1a:	9c 93       	st	X, r25
 a1c:	8e 93       	st	-X, r24
 a1e:	12 97       	sbiw	r26, 0x02	; 2
 a20:	e0 e0       	ldi	r30, 0x00	; 0
 a22:	f0 e0       	ldi	r31, 0x00	; 0
 a24:	8a 81       	ldd	r24, Y+2	; 0x02
 a26:	9b 81       	ldd	r25, Y+3	; 0x03
 a28:	00 97       	sbiw	r24, 0x00	; 0
 a2a:	19 f0       	breq	.+6      	; 0xa32 <free+0xe4>
 a2c:	fe 01       	movw	r30, r28
 a2e:	ec 01       	movw	r28, r24
 a30:	f9 cf       	rjmp	.-14     	; 0xa24 <free+0xd6>
 a32:	ce 01       	movw	r24, r28
 a34:	02 96       	adiw	r24, 0x02	; 2
 a36:	28 81       	ld	r18, Y
 a38:	39 81       	ldd	r19, Y+1	; 0x01
 a3a:	82 0f       	add	r24, r18
 a3c:	93 1f       	adc	r25, r19
 a3e:	20 91 3d 02 	lds	r18, 0x023D
 a42:	30 91 3e 02 	lds	r19, 0x023E
 a46:	28 17       	cp	r18, r24
 a48:	39 07       	cpc	r19, r25
 a4a:	69 f4       	brne	.+26     	; 0xa66 <free+0x118>
 a4c:	30 97       	sbiw	r30, 0x00	; 0
 a4e:	29 f4       	brne	.+10     	; 0xa5a <free+0x10c>
 a50:	10 92 40 02 	sts	0x0240, r1
 a54:	10 92 3f 02 	sts	0x023F, r1
 a58:	02 c0       	rjmp	.+4      	; 0xa5e <free+0x110>
 a5a:	13 82       	std	Z+3, r1	; 0x03
 a5c:	12 82       	std	Z+2, r1	; 0x02
 a5e:	d0 93 3e 02 	sts	0x023E, r29
 a62:	c0 93 3d 02 	sts	0x023D, r28
 a66:	df 91       	pop	r29
 a68:	cf 91       	pop	r28
 a6a:	08 95       	ret

00000a6c <strnlen_P>:
 a6c:	fc 01       	movw	r30, r24
 a6e:	05 90       	lpm	r0, Z+
 a70:	61 50       	subi	r22, 0x01	; 1
 a72:	70 40       	sbci	r23, 0x00	; 0
 a74:	01 10       	cpse	r0, r1
 a76:	d8 f7       	brcc	.-10     	; 0xa6e <strnlen_P+0x2>
 a78:	80 95       	com	r24
 a7a:	90 95       	com	r25
 a7c:	8e 0f       	add	r24, r30
 a7e:	9f 1f       	adc	r25, r31
 a80:	08 95       	ret

00000a82 <memset>:
 a82:	dc 01       	movw	r26, r24
 a84:	01 c0       	rjmp	.+2      	; 0xa88 <memset+0x6>
 a86:	6d 93       	st	X+, r22
 a88:	41 50       	subi	r20, 0x01	; 1
 a8a:	50 40       	sbci	r21, 0x00	; 0
 a8c:	e0 f7       	brcc	.-8      	; 0xa86 <memset+0x4>
 a8e:	08 95       	ret

00000a90 <strnlen>:
 a90:	fc 01       	movw	r30, r24
 a92:	61 50       	subi	r22, 0x01	; 1
 a94:	70 40       	sbci	r23, 0x00	; 0
 a96:	01 90       	ld	r0, Z+
 a98:	01 10       	cpse	r0, r1
 a9a:	d8 f7       	brcc	.-10     	; 0xa92 <strnlen+0x2>
 a9c:	80 95       	com	r24
 a9e:	90 95       	com	r25
 aa0:	8e 0f       	add	r24, r30
 aa2:	9f 1f       	adc	r25, r31
 aa4:	08 95       	ret

00000aa6 <fputc>:
 aa6:	0f 93       	push	r16
 aa8:	1f 93       	push	r17
 aaa:	cf 93       	push	r28
 aac:	df 93       	push	r29
 aae:	18 2f       	mov	r17, r24
 ab0:	09 2f       	mov	r16, r25
 ab2:	eb 01       	movw	r28, r22
 ab4:	8b 81       	ldd	r24, Y+3	; 0x03
 ab6:	81 fd       	sbrc	r24, 1
 ab8:	03 c0       	rjmp	.+6      	; 0xac0 <fputc+0x1a>
 aba:	8f ef       	ldi	r24, 0xFF	; 255
 abc:	9f ef       	ldi	r25, 0xFF	; 255
 abe:	20 c0       	rjmp	.+64     	; 0xb00 <fputc+0x5a>
 ac0:	82 ff       	sbrs	r24, 2
 ac2:	10 c0       	rjmp	.+32     	; 0xae4 <fputc+0x3e>
 ac4:	4e 81       	ldd	r20, Y+6	; 0x06
 ac6:	5f 81       	ldd	r21, Y+7	; 0x07
 ac8:	2c 81       	ldd	r18, Y+4	; 0x04
 aca:	3d 81       	ldd	r19, Y+5	; 0x05
 acc:	42 17       	cp	r20, r18
 ace:	53 07       	cpc	r21, r19
 ad0:	7c f4       	brge	.+30     	; 0xaf0 <fputc+0x4a>
 ad2:	e8 81       	ld	r30, Y
 ad4:	f9 81       	ldd	r31, Y+1	; 0x01
 ad6:	9f 01       	movw	r18, r30
 ad8:	2f 5f       	subi	r18, 0xFF	; 255
 ada:	3f 4f       	sbci	r19, 0xFF	; 255
 adc:	39 83       	std	Y+1, r19	; 0x01
 ade:	28 83       	st	Y, r18
 ae0:	10 83       	st	Z, r17
 ae2:	06 c0       	rjmp	.+12     	; 0xaf0 <fputc+0x4a>
 ae4:	e8 85       	ldd	r30, Y+8	; 0x08
 ae6:	f9 85       	ldd	r31, Y+9	; 0x09
 ae8:	81 2f       	mov	r24, r17
 aea:	09 95       	icall
 aec:	89 2b       	or	r24, r25
 aee:	29 f7       	brne	.-54     	; 0xaba <fputc+0x14>
 af0:	2e 81       	ldd	r18, Y+6	; 0x06
 af2:	3f 81       	ldd	r19, Y+7	; 0x07
 af4:	2f 5f       	subi	r18, 0xFF	; 255
 af6:	3f 4f       	sbci	r19, 0xFF	; 255
 af8:	3f 83       	std	Y+7, r19	; 0x07
 afa:	2e 83       	std	Y+6, r18	; 0x06
 afc:	81 2f       	mov	r24, r17
 afe:	90 2f       	mov	r25, r16
 b00:	df 91       	pop	r29
 b02:	cf 91       	pop	r28
 b04:	1f 91       	pop	r17
 b06:	0f 91       	pop	r16
 b08:	08 95       	ret

00000b0a <__ultoa_invert>:
 b0a:	fa 01       	movw	r30, r20
 b0c:	aa 27       	eor	r26, r26
 b0e:	28 30       	cpi	r18, 0x08	; 8
 b10:	51 f1       	breq	.+84     	; 0xb66 <__ultoa_invert+0x5c>
 b12:	20 31       	cpi	r18, 0x10	; 16
 b14:	81 f1       	breq	.+96     	; 0xb76 <__ultoa_invert+0x6c>
 b16:	e8 94       	clt
 b18:	6f 93       	push	r22
 b1a:	6e 7f       	andi	r22, 0xFE	; 254
 b1c:	6e 5f       	subi	r22, 0xFE	; 254
 b1e:	7f 4f       	sbci	r23, 0xFF	; 255
 b20:	8f 4f       	sbci	r24, 0xFF	; 255
 b22:	9f 4f       	sbci	r25, 0xFF	; 255
 b24:	af 4f       	sbci	r26, 0xFF	; 255
 b26:	b1 e0       	ldi	r27, 0x01	; 1
 b28:	3e d0       	rcall	.+124    	; 0xba6 <__ultoa_invert+0x9c>
 b2a:	b4 e0       	ldi	r27, 0x04	; 4
 b2c:	3c d0       	rcall	.+120    	; 0xba6 <__ultoa_invert+0x9c>
 b2e:	67 0f       	add	r22, r23
 b30:	78 1f       	adc	r23, r24
 b32:	89 1f       	adc	r24, r25
 b34:	9a 1f       	adc	r25, r26
 b36:	a1 1d       	adc	r26, r1
 b38:	68 0f       	add	r22, r24
 b3a:	79 1f       	adc	r23, r25
 b3c:	8a 1f       	adc	r24, r26
 b3e:	91 1d       	adc	r25, r1
 b40:	a1 1d       	adc	r26, r1
 b42:	6a 0f       	add	r22, r26
 b44:	71 1d       	adc	r23, r1
 b46:	81 1d       	adc	r24, r1
 b48:	91 1d       	adc	r25, r1
 b4a:	a1 1d       	adc	r26, r1
 b4c:	20 d0       	rcall	.+64     	; 0xb8e <__ultoa_invert+0x84>
 b4e:	09 f4       	brne	.+2      	; 0xb52 <__ultoa_invert+0x48>
 b50:	68 94       	set
 b52:	3f 91       	pop	r19
 b54:	2a e0       	ldi	r18, 0x0A	; 10
 b56:	26 9f       	mul	r18, r22
 b58:	11 24       	eor	r1, r1
 b5a:	30 19       	sub	r19, r0
 b5c:	30 5d       	subi	r19, 0xD0	; 208
 b5e:	31 93       	st	Z+, r19
 b60:	de f6       	brtc	.-74     	; 0xb18 <__ultoa_invert+0xe>
 b62:	cf 01       	movw	r24, r30
 b64:	08 95       	ret
 b66:	46 2f       	mov	r20, r22
 b68:	47 70       	andi	r20, 0x07	; 7
 b6a:	40 5d       	subi	r20, 0xD0	; 208
 b6c:	41 93       	st	Z+, r20
 b6e:	b3 e0       	ldi	r27, 0x03	; 3
 b70:	0f d0       	rcall	.+30     	; 0xb90 <__ultoa_invert+0x86>
 b72:	c9 f7       	brne	.-14     	; 0xb66 <__ultoa_invert+0x5c>
 b74:	f6 cf       	rjmp	.-20     	; 0xb62 <__ultoa_invert+0x58>
 b76:	46 2f       	mov	r20, r22
 b78:	4f 70       	andi	r20, 0x0F	; 15
 b7a:	40 5d       	subi	r20, 0xD0	; 208
 b7c:	4a 33       	cpi	r20, 0x3A	; 58
 b7e:	18 f0       	brcs	.+6      	; 0xb86 <__ultoa_invert+0x7c>
 b80:	49 5d       	subi	r20, 0xD9	; 217
 b82:	31 fd       	sbrc	r19, 1
 b84:	40 52       	subi	r20, 0x20	; 32
 b86:	41 93       	st	Z+, r20
 b88:	02 d0       	rcall	.+4      	; 0xb8e <__ultoa_invert+0x84>
 b8a:	a9 f7       	brne	.-22     	; 0xb76 <__ultoa_invert+0x6c>
 b8c:	ea cf       	rjmp	.-44     	; 0xb62 <__ultoa_invert+0x58>
 b8e:	b4 e0       	ldi	r27, 0x04	; 4
 b90:	a6 95       	lsr	r26
 b92:	97 95       	ror	r25
 b94:	87 95       	ror	r24
 b96:	77 95       	ror	r23
 b98:	67 95       	ror	r22
 b9a:	ba 95       	dec	r27
 b9c:	c9 f7       	brne	.-14     	; 0xb90 <__ultoa_invert+0x86>
 b9e:	00 97       	sbiw	r24, 0x00	; 0
 ba0:	61 05       	cpc	r22, r1
 ba2:	71 05       	cpc	r23, r1
 ba4:	08 95       	ret
 ba6:	9b 01       	movw	r18, r22
 ba8:	ac 01       	movw	r20, r24
 baa:	0a 2e       	mov	r0, r26
 bac:	06 94       	lsr	r0
 bae:	57 95       	ror	r21
 bb0:	47 95       	ror	r20
 bb2:	37 95       	ror	r19
 bb4:	27 95       	ror	r18
 bb6:	ba 95       	dec	r27
 bb8:	c9 f7       	brne	.-14     	; 0xbac <__ultoa_invert+0xa2>
 bba:	62 0f       	add	r22, r18
 bbc:	73 1f       	adc	r23, r19
 bbe:	84 1f       	adc	r24, r20
 bc0:	95 1f       	adc	r25, r21
 bc2:	a0 1d       	adc	r26, r0
 bc4:	08 95       	ret

00000bc6 <__prologue_saves__>:
 bc6:	2f 92       	push	r2
 bc8:	3f 92       	push	r3
 bca:	4f 92       	push	r4
 bcc:	5f 92       	push	r5
 bce:	6f 92       	push	r6
 bd0:	7f 92       	push	r7
 bd2:	8f 92       	push	r8
 bd4:	9f 92       	push	r9
 bd6:	af 92       	push	r10
 bd8:	bf 92       	push	r11
 bda:	cf 92       	push	r12
 bdc:	df 92       	push	r13
 bde:	ef 92       	push	r14
 be0:	ff 92       	push	r15
 be2:	0f 93       	push	r16
 be4:	1f 93       	push	r17
 be6:	cf 93       	push	r28
 be8:	df 93       	push	r29
 bea:	cd b7       	in	r28, 0x3d	; 61
 bec:	de b7       	in	r29, 0x3e	; 62
 bee:	ca 1b       	sub	r28, r26
 bf0:	db 0b       	sbc	r29, r27
 bf2:	0f b6       	in	r0, 0x3f	; 63
 bf4:	f8 94       	cli
 bf6:	de bf       	out	0x3e, r29	; 62
 bf8:	0f be       	out	0x3f, r0	; 63
 bfa:	cd bf       	out	0x3d, r28	; 61
 bfc:	09 94       	ijmp

00000bfe <__epilogue_restores__>:
 bfe:	2a 88       	ldd	r2, Y+18	; 0x12
 c00:	39 88       	ldd	r3, Y+17	; 0x11
 c02:	48 88       	ldd	r4, Y+16	; 0x10
 c04:	5f 84       	ldd	r5, Y+15	; 0x0f
 c06:	6e 84       	ldd	r6, Y+14	; 0x0e
 c08:	7d 84       	ldd	r7, Y+13	; 0x0d
 c0a:	8c 84       	ldd	r8, Y+12	; 0x0c
 c0c:	9b 84       	ldd	r9, Y+11	; 0x0b
 c0e:	aa 84       	ldd	r10, Y+10	; 0x0a
 c10:	b9 84       	ldd	r11, Y+9	; 0x09
 c12:	c8 84       	ldd	r12, Y+8	; 0x08
 c14:	df 80       	ldd	r13, Y+7	; 0x07
 c16:	ee 80       	ldd	r14, Y+6	; 0x06
 c18:	fd 80       	ldd	r15, Y+5	; 0x05
 c1a:	0c 81       	ldd	r16, Y+4	; 0x04
 c1c:	1b 81       	ldd	r17, Y+3	; 0x03
 c1e:	aa 81       	ldd	r26, Y+2	; 0x02
 c20:	b9 81       	ldd	r27, Y+1	; 0x01
 c22:	ce 0f       	add	r28, r30
 c24:	d1 1d       	adc	r29, r1
 c26:	0f b6       	in	r0, 0x3f	; 63
 c28:	f8 94       	cli
 c2a:	de bf       	out	0x3e, r29	; 62
 c2c:	0f be       	out	0x3f, r0	; 63
 c2e:	cd bf       	out	0x3d, r28	; 61
 c30:	ed 01       	movw	r28, r26
 c32:	08 95       	ret

00000c34 <_exit>:
 c34:	f8 94       	cli

00000c36 <__stop_program>:
 c36:	ff cf       	rjmp	.-2      	; 0xc36 <__stop_program>
