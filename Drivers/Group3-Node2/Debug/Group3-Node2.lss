
Group3-Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002ba  00800200  00001284  00001318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001284  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004f  008004ba  008004ba  000015d2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000015d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001630  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00001670  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001deb  00000000  00000000  000017c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001213  00000000  00000000  000035ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e71  00000000  00000000  000047be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000048c  00000000  00000000  00005630  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007e4  00000000  00000000  00005abc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001161  00000000  00000000  000062a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00007401  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	93 c2       	rjmp	.+1318   	; 0x538 <__vector_4>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e4 e8       	ldi	r30, 0x84	; 132
      fc:	f2 e1       	ldi	r31, 0x12	; 18
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	aa 3b       	cpi	r26, 0xBA	; 186
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	25 e0       	ldi	r18, 0x05	; 5
     110:	aa eb       	ldi	r26, 0xBA	; 186
     112:	b4 e0       	ldi	r27, 0x04	; 4
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a9 30       	cpi	r26, 0x09	; 9
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	20 d2       	rcall	.+1088   	; 0x560 <main>
     120:	0c 94 40 09 	jmp	0x1280	; 0x1280 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <sendCANmessage>:
#include "MCP2515.h"

	uint8_t messageCount = 0x00;

void sendCANmessage(CAN_message_t* data)
{
     126:	df 92       	push	r13
     128:	ef 92       	push	r14
     12a:	ff 92       	push	r15
     12c:	0f 93       	push	r16
     12e:	1f 93       	push	r17
     130:	cf 93       	push	r28
     132:	df 93       	push	r29
     134:	8c 01       	movw	r16, r24
	uint8_t IDlow, IDhigh, status, TXBnBase;

	if(messageCount > 2)
     136:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <__data_end>
     13a:	83 30       	cpi	r24, 0x03	; 3
     13c:	10 f0       	brcs	.+4      	; 0x142 <sendCANmessage+0x1c>
		messageCount = 0x00;	// Counter to specify the TX buffer to write the message to.
     13e:	10 92 ba 04 	sts	0x04BA, r1	; 0x8004ba <__data_end>
	TXBnBase = 0x30 + messageCount << 4;	// Create base address in order to change buffer. TXB0CTRL + messageCount shifted left 4 times creates base address for each of the three TX buffers
     142:	d0 91 ba 04 	lds	r29, 0x04BA	; 0x8004ba <__data_end>
     146:	d2 95       	swap	r29
     148:	d0 7f       	andi	r29, 0xF0	; 240
	status = MCP2515_readStatus(TXBnBase);
     14a:	8d 2f       	mov	r24, r29
     14c:	c5 d3       	rcall	.+1930   	; 0x8d8 <MCP2515_readStatus>
     14e:	c8 2f       	mov	r28, r24
	printf("\n\rMessageCount: %d\n\r", messageCount);
     150:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <__data_end>
     154:	1f 92       	push	r1
     156:	8f 93       	push	r24
     158:	86 e0       	ldi	r24, 0x06	; 6
     15a:	92 e0       	ldi	r25, 0x02	; 2
     15c:	9f 93       	push	r25
     15e:	8f 93       	push	r24
     160:	8d d4       	rcall	.+2330   	; 0xa7c <printf>
	printf("TX status: %x\n\n\r", status);
     162:	1f 92       	push	r1
     164:	cf 93       	push	r28
     166:	8b e1       	ldi	r24, 0x1B	; 27
     168:	92 e0       	ldi	r25, 0x02	; 2
     16a:	9f 93       	push	r25
     16c:	8f 93       	push	r24
     16e:	86 d4       	rcall	.+2316   	; 0xa7c <printf>
	
	//while ( (status & 0x08) ) printf("Waiting for TX buffer -%d- to be transmitted %d\n\r", messageCount); // CHANGE THIS WHILE LOOP, MCU gets stuck in here
	
	
	uint16_t ID = data->ID;
     170:	f8 01       	movw	r30, r16
     172:	e0 80       	ld	r14, Z
     174:	f1 80       	ldd	r15, Z+1	; 0x01
	IDhigh = ID >> 3;		// Right shift by 3 to make 8 most significant bits of the 11 bits ID
	IDlow = ID << 5;		// Left shift by 5 to make 3 Least significant bits of ID to 3 most significant bits of IDlow
	printf("ID read-for-send: %x\n\r", ID);
     176:	ff 92       	push	r15
     178:	ef 92       	push	r14
     17a:	8c e2       	ldi	r24, 0x2C	; 44
     17c:	92 e0       	ldi	r25, 0x02	; 2
     17e:	9f 93       	push	r25
     180:	8f 93       	push	r24
     182:	7c d4       	rcall	.+2296   	; 0xa7c <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     184:	89 ef       	ldi	r24, 0xF9	; 249
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	01 97       	sbiw	r24, 0x01	; 1
     18a:	f1 f7       	brne	.-4      	; 0x188 <sendCANmessage+0x62>
     18c:	00 c0       	rjmp	.+0      	; 0x18e <sendCANmessage+0x68>
     18e:	00 00       	nop
	
	
	_delay_ms(1);
	MCP2515_Write(TXBnBase + 0x01, IDhigh);	// TXBnBASE + offset = MCP_TXBnSIDH
     190:	dd 24       	eor	r13, r13
     192:	d3 94       	inc	r13
     194:	dd 0e       	add	r13, r29
     196:	b7 01       	movw	r22, r14
     198:	76 95       	lsr	r23
     19a:	67 95       	ror	r22
     19c:	76 95       	lsr	r23
     19e:	67 95       	ror	r22
     1a0:	76 95       	lsr	r23
     1a2:	67 95       	ror	r22
     1a4:	8d 2d       	mov	r24, r13
     1a6:	76 d3       	rcall	.+1772   	; 0x894 <MCP2515_Write>
	MCP2515_Write(TXBnBase + 0x02, IDlow);	// TXBnBASE + offset = MCP_TXBnSIDL
     1a8:	c2 e0       	ldi	r28, 0x02	; 2
     1aa:	cd 0f       	add	r28, r29
     1ac:	6e 2d       	mov	r22, r14
     1ae:	62 95       	swap	r22
     1b0:	66 0f       	add	r22, r22
     1b2:	60 7e       	andi	r22, 0xE0	; 224
     1b4:	8c 2f       	mov	r24, r28
     1b6:	6e d3       	rcall	.+1756   	; 0x894 <MCP2515_Write>
     1b8:	e3 ec       	ldi	r30, 0xC3	; 195
     1ba:	f9 e0       	ldi	r31, 0x09	; 9
     1bc:	31 97       	sbiw	r30, 0x01	; 1
     1be:	f1 f7       	brne	.-4      	; 0x1bc <sendCANmessage+0x96>
     1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <sendCANmessage+0x9c>
	_delay_ms(10);
	printf("IDhigh read-for-send: %x\n\r", MCP2515_Read(TXBnBase + 0x01));
     1c2:	00 00       	nop
     1c4:	8d 2d       	mov	r24, r13
     1c6:	59 d3       	rcall	.+1714   	; 0x87a <MCP2515_Read>
     1c8:	1f 92       	push	r1
     1ca:	8f 93       	push	r24
     1cc:	83 e4       	ldi	r24, 0x43	; 67
     1ce:	92 e0       	ldi	r25, 0x02	; 2
     1d0:	9f 93       	push	r25
     1d2:	8f 93       	push	r24
	printf("IDlow read-for-send: %x\n\r", MCP2515_Read(TXBnBase + 0x02));
     1d4:	53 d4       	rcall	.+2214   	; 0xa7c <printf>
     1d6:	8c 2f       	mov	r24, r28
     1d8:	50 d3       	rcall	.+1696   	; 0x87a <MCP2515_Read>
     1da:	1f 92       	push	r1
     1dc:	8f 93       	push	r24
     1de:	8e e5       	ldi	r24, 0x5E	; 94
     1e0:	92 e0       	ldi	r25, 0x02	; 2
     1e2:	9f 93       	push	r25
     1e4:	8f 93       	push	r24
	
	

	
	MCP2515_Write(TXBnBase + 0x05, data->length);	// TXBnBASE + offset = MCP_TXBnDLC
     1e6:	4a d4       	rcall	.+2196   	; 0xa7c <printf>
     1e8:	f8 01       	movw	r30, r16
     1ea:	62 81       	ldd	r22, Z+2	; 0x02
     1ec:	85 e0       	ldi	r24, 0x05	; 5
     1ee:	8d 0f       	add	r24, r29
     1f0:	51 d3       	rcall	.+1698   	; 0x894 <MCP2515_Write>
	
	for(uint8_t byte = 0; byte < data->length; byte++)
     1f2:	8d b7       	in	r24, 0x3d	; 61
     1f4:	9e b7       	in	r25, 0x3e	; 62
     1f6:	44 96       	adiw	r24, 0x14	; 20
     1f8:	0f b6       	in	r0, 0x3f	; 63
     1fa:	f8 94       	cli
     1fc:	9e bf       	out	0x3e, r25	; 62
     1fe:	0f be       	out	0x3f, r0	; 63
     200:	8d bf       	out	0x3d, r24	; 61
     202:	f8 01       	movw	r30, r16
     204:	82 81       	ldd	r24, Z+2	; 0x02
     206:	88 23       	and	r24, r24
     208:	71 f0       	breq	.+28     	; 0x226 <sendCANmessage+0x100>
	{
		MCP2515_Write(TXBnBase + 0x06+byte, data->msg[byte]);	// TXBnBASE + offset = MCP_TXBnDm
     20a:	c0 e0       	ldi	r28, 0x00	; 0
     20c:	da 5f       	subi	r29, 0xFA	; 250
     20e:	f8 01       	movw	r30, r16
     210:	ec 0f       	add	r30, r28
     212:	f1 1d       	adc	r31, r1
     214:	63 81       	ldd	r22, Z+3	; 0x03
     216:	8d 2f       	mov	r24, r29
     218:	8c 0f       	add	r24, r28
     21a:	3c d3       	rcall	.+1656   	; 0x894 <MCP2515_Write>
	

	
	MCP2515_Write(TXBnBase + 0x05, data->length);	// TXBnBASE + offset = MCP_TXBnDLC
	
	for(uint8_t byte = 0; byte < data->length; byte++)
     21c:	cf 5f       	subi	r28, 0xFF	; 255
     21e:	f8 01       	movw	r30, r16
     220:	92 81       	ldd	r25, Z+2	; 0x02
     222:	c9 17       	cp	r28, r25
	{
		MCP2515_Write(TXBnBase + 0x06+byte, data->msg[byte]);	// TXBnBASE + offset = MCP_TXBnDm
	}
	switch(messageCount)
     224:	a0 f3       	brcs	.-24     	; 0x20e <sendCANmessage+0xe8>
     226:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <__data_end>
     22a:	81 30       	cpi	r24, 0x01	; 1
     22c:	39 f0       	breq	.+14     	; 0x23c <sendCANmessage+0x116>
     22e:	18 f0       	brcs	.+6      	; 0x236 <sendCANmessage+0x110>
	{
		case 0: MCP2515_RTS(MCP_RTS_TX0); break;	// Request to send TXB0
     230:	82 30       	cpi	r24, 0x02	; 2
     232:	39 f0       	breq	.+14     	; 0x242 <sendCANmessage+0x11c>
     234:	08 c0       	rjmp	.+16     	; 0x246 <sendCANmessage+0x120>
     236:	81 e8       	ldi	r24, 0x81	; 129
		case 1: MCP2515_RTS(MCP_RTS_TX1); break;	// Request to send TXB1
     238:	47 d3       	rcall	.+1678   	; 0x8c8 <MCP2515_RTS>
     23a:	05 c0       	rjmp	.+10     	; 0x246 <sendCANmessage+0x120>
     23c:	82 e8       	ldi	r24, 0x82	; 130
     23e:	44 d3       	rcall	.+1672   	; 0x8c8 <MCP2515_RTS>
		case 2: MCP2515_RTS(MCP_RTS_TX2); break;	// Request to send TXB2
     240:	02 c0       	rjmp	.+4      	; 0x246 <sendCANmessage+0x120>
     242:	84 e8       	ldi	r24, 0x84	; 132
     244:	41 d3       	rcall	.+1666   	; 0x8c8 <MCP2515_RTS>
		default: break;
	}
	
	messageCount++;
     246:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <__data_end>
     24a:	8f 5f       	subi	r24, 0xFF	; 255
     24c:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <__data_end>
	
	// Request to send
	//MCP2515_RTS(MCP_RTS_TX0);
	//MCP2515_bitMask(MCP_TXB0CTRL, 0x08, 0x08);
}
     250:	df 91       	pop	r29
     252:	cf 91       	pop	r28
     254:	1f 91       	pop	r17
     256:	0f 91       	pop	r16
     258:	ff 90       	pop	r15
     25a:	ef 90       	pop	r14
     25c:	df 90       	pop	r13
     25e:	08 95       	ret

00000260 <receiveCANmesssage>:

void receiveCANmesssage( CAN_message_t* data, uint8_t reg )
{
     260:	cf 92       	push	r12
     262:	df 92       	push	r13
     264:	ef 92       	push	r14
     266:	ff 92       	push	r15
     268:	0f 93       	push	r16
     26a:	1f 93       	push	r17
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
     270:	8c 01       	movw	r16, r24
     272:	d6 2f       	mov	r29, r22
	
	uint16_t ID;
	
	uint8_t IDlow, IDhigh, data_length_code;

	IDhigh = MCP2515_Read(reg+0x01);	// RXBnBASE + offset = RXBnSIDH
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	86 0f       	add	r24, r22
     278:	00 d3       	rcall	.+1536   	; 0x87a <MCP2515_Read>
     27a:	f8 2e       	mov	r15, r24
	IDlow = MCP2515_Read(reg+0x02);		// RXBnBASE + offset = RXBnSIDL
     27c:	82 e0       	ldi	r24, 0x02	; 2
     27e:	8d 0f       	add	r24, r29
     280:	fc d2       	rcall	.+1528   	; 0x87a <MCP2515_Read>
     282:	c8 2f       	mov	r28, r24
	
	printf("\n\rIDhigh received: %x\n\r", IDhigh);
     284:	cf 2c       	mov	r12, r15
     286:	d1 2c       	mov	r13, r1
     288:	1f 92       	push	r1
     28a:	ff 92       	push	r15
     28c:	88 e7       	ldi	r24, 0x78	; 120
     28e:	92 e0       	ldi	r25, 0x02	; 2
     290:	9f 93       	push	r25
     292:	8f 93       	push	r24
     294:	f3 d3       	rcall	.+2022   	; 0xa7c <printf>
	printf("IDlow received: %x\n\r", IDlow);
     296:	ec 2e       	mov	r14, r28
     298:	f1 2c       	mov	r15, r1
     29a:	1f 92       	push	r1
     29c:	cf 93       	push	r28
     29e:	80 e9       	ldi	r24, 0x90	; 144
     2a0:	92 e0       	ldi	r25, 0x02	; 2
     2a2:	9f 93       	push	r25
     2a4:	8f 93       	push	r24
     2a6:	ea d3       	rcall	.+2004   	; 0xa7c <printf>


	data->ID = (IDhigh << 8) | IDlow;
	data->ID = data->ID >> 5;
     2a8:	9c 2d       	mov	r25, r12
     2aa:	88 27       	eor	r24, r24
     2ac:	8e 29       	or	r24, r14
     2ae:	9f 29       	or	r25, r15
     2b0:	96 95       	lsr	r25
     2b2:	87 95       	ror	r24
     2b4:	92 95       	swap	r25
     2b6:	82 95       	swap	r24
     2b8:	8f 70       	andi	r24, 0x0F	; 15
     2ba:	89 27       	eor	r24, r25
     2bc:	9f 70       	andi	r25, 0x0F	; 15
     2be:	89 27       	eor	r24, r25
     2c0:	f8 01       	movw	r30, r16
     2c2:	91 83       	std	Z+1, r25	; 0x01
     2c4:	80 83       	st	Z, r24
	printf("ID received: %x\n\r", data->ID);
     2c6:	9f 93       	push	r25
     2c8:	8f 93       	push	r24
     2ca:	85 ea       	ldi	r24, 0xA5	; 165
     2cc:	92 e0       	ldi	r25, 0x02	; 2
     2ce:	9f 93       	push	r25
     2d0:	8f 93       	push	r24
	
	data->ID = IDhigh
	data->ID = data->ID << 3;
	data->ID = 0xe0 & IDlow;
	*/
	data_length_code = MCP2515_Read(reg+0x05);	// RXBnBASE + offset = MCP_RXBnDLC
     2d2:	d4 d3       	rcall	.+1960   	; 0xa7c <printf>
     2d4:	85 e0       	ldi	r24, 0x05	; 5
     2d6:	8d 0f       	add	r24, r29
     2d8:	d0 d2       	rcall	.+1440   	; 0x87a <MCP2515_Read>
	data->length = data_length_code & 0b1111;
     2da:	8f 70       	andi	r24, 0x0F	; 15
     2dc:	f8 01       	movw	r30, r16
     2de:	82 83       	std	Z+2, r24	; 0x02
	
	for(uint8_t byte = 0; byte < data->length; byte++)
     2e0:	2d b7       	in	r18, 0x3d	; 61
     2e2:	3e b7       	in	r19, 0x3e	; 62
     2e4:	24 5f       	subi	r18, 0xF4	; 244
     2e6:	3f 4f       	sbci	r19, 0xFF	; 255
     2e8:	0f b6       	in	r0, 0x3f	; 63
     2ea:	f8 94       	cli
     2ec:	3e bf       	out	0x3e, r19	; 62
     2ee:	0f be       	out	0x3f, r0	; 63
     2f0:	2d bf       	out	0x3d, r18	; 61
     2f2:	88 23       	and	r24, r24
     2f4:	71 f0       	breq	.+28     	; 0x312 <receiveCANmesssage+0xb2>
	{
		data->msg[byte] = MCP2515_Read(reg+0x06+byte);	// RXBnBASE + offset = MCP_RXBnDm
     2f6:	c0 e0       	ldi	r28, 0x00	; 0
     2f8:	da 5f       	subi	r29, 0xFA	; 250
     2fa:	8d 2f       	mov	r24, r29
     2fc:	8c 0f       	add	r24, r28
     2fe:	bd d2       	rcall	.+1402   	; 0x87a <MCP2515_Read>
     300:	f8 01       	movw	r30, r16
     302:	ec 0f       	add	r30, r28
     304:	f1 1d       	adc	r31, r1
     306:	83 83       	std	Z+3, r24	; 0x03
	data->ID = 0xe0 & IDlow;
	*/
	data_length_code = MCP2515_Read(reg+0x05);	// RXBnBASE + offset = MCP_RXBnDLC
	data->length = data_length_code & 0b1111;
	
	for(uint8_t byte = 0; byte < data->length; byte++)
     308:	cf 5f       	subi	r28, 0xFF	; 255
     30a:	f8 01       	movw	r30, r16
     30c:	82 81       	ldd	r24, Z+2	; 0x02
     30e:	c8 17       	cp	r28, r24
     310:	a0 f3       	brcs	.-24     	; 0x2fa <receiveCANmesssage+0x9a>
	{
		data->msg[byte] = MCP2515_Read(reg+0x06+byte);	// RXBnBASE + offset = MCP_RXBnDm
	}
	
     312:	df 91       	pop	r29
     314:	cf 91       	pop	r28
     316:	1f 91       	pop	r17
     318:	0f 91       	pop	r16
     31a:	ff 90       	pop	r15
     31c:	ef 90       	pop	r14
     31e:	df 90       	pop	r13
     320:	cf 90       	pop	r12
     322:	08 95       	ret

00000324 <InterruptInit>:
volatile int CAN_interrupt = 0;
CAN_message_t data,data1,data2,data3, receivedCAN1, receivedCAN2;

void InterruptInit( void )
{
	DDRD &= ~(1<<DDD3);
     324:	53 98       	cbi	0x0a, 3	; 10
	
	cli();
     326:	f8 94       	cli
	
	// Interrupt on falling edge
	EICRA &= ~(1<<ISC30);
     328:	e9 e6       	ldi	r30, 0x69	; 105
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	80 81       	ld	r24, Z
     32e:	8f 7b       	andi	r24, 0xBF	; 191
     330:	80 83       	st	Z, r24
	EICRA |= (1<<ISC31);
     332:	80 81       	ld	r24, Z
     334:	80 68       	ori	r24, 0x80	; 128
     336:	80 83       	st	Z, r24

	
	// Enable Interrupt on PD3
	EIMSK |= (1<<INT3);
     338:	eb 9a       	sbi	0x1d, 3	; 29
	
	// Enable global interrupts
	sei();
     33a:	78 94       	sei
     33c:	08 95       	ret

0000033e <handleCANInterrupt>:
}*/



void handleCANInterrupt( void )
{
     33e:	cf 92       	push	r12
     340:	df 92       	push	r13
     342:	ef 92       	push	r14
     344:	ff 92       	push	r15
     346:	0f 93       	push	r16
     348:	1f 93       	push	r17
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
	CAN_interrupt = 0;
     34e:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <CAN_interrupt+0x1>
     352:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <CAN_interrupt>
	printf("\n\nr\rCAN Interrupt");
     356:	87 eb       	ldi	r24, 0xB7	; 183
     358:	92 e0       	ldi	r25, 0x02	; 2
     35a:	9f 93       	push	r25
     35c:	8f 93       	push	r24
     35e:	8e d3       	rcall	.+1820   	; 0xa7c <printf>
	uint8_t status;

printf("******************** RECEIVED DATA*******************\n\r");
     360:	89 ec       	ldi	r24, 0xC9	; 201
     362:	92 e0       	ldi	r25, 0x02	; 2
     364:	9f 93       	push	r25
     366:	8f 93       	push	r24
     368:	89 d3       	rcall	.+1810   	; 0xa7c <printf>
	
	// Interrupt status
	status = MCP2515_Read(MCP_CANINTF);
     36a:	8c e2       	ldi	r24, 0x2C	; 44
     36c:	86 d2       	rcall	.+1292   	; 0x87a <MCP2515_Read>
     36e:	c8 2f       	mov	r28, r24
     370:	1f 92       	push	r1
	printf("\n\rCANINTF : %x\n\n\r", status);
     372:	8f 93       	push	r24
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	93 e0       	ldi	r25, 0x03	; 3
     378:	9f 93       	push	r25
     37a:	8f 93       	push	r24
     37c:	7f d3       	rcall	.+1790   	; 0xa7c <printf>
     37e:	8d b7       	in	r24, 0x3d	; 61
	

	switch(status & 0x03){			// Check for Interrupt ERROR (Right now ERROR check is disabled 0xa3) and RXBn
     380:	9e b7       	in	r25, 0x3e	; 62
     382:	08 96       	adiw	r24, 0x08	; 8
     384:	0f b6       	in	r0, 0x3f	; 63
     386:	f8 94       	cli
     388:	9e bf       	out	0x3e, r25	; 62
     38a:	0f be       	out	0x3f, r0	; 63
     38c:	8d bf       	out	0x3d, r24	; 61
     38e:	8c 2f       	mov	r24, r28
     390:	83 70       	andi	r24, 0x03	; 3
     392:	82 30       	cpi	r24, 0x02	; 2
     394:	79 f1       	breq	.+94     	; 0x3f4 <handleCANInterrupt+0xb6>
     396:	83 30       	cpi	r24, 0x03	; 3
     398:	09 f4       	brne	.+2      	; 0x39c <handleCANInterrupt+0x5e>
     39a:	55 c0       	rjmp	.+170    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     39c:	81 30       	cpi	r24, 0x01	; 1
     39e:	09 f0       	breq	.+2      	; 0x3a2 <handleCANInterrupt+0x64>
     3a0:	9f c0       	rjmp	.+318    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
		case 1: receiveCANmesssage(&receivedCAN1, 0x60);	// Receive RXB0
     3a2:	60 e6       	ldi	r22, 0x60	; 96
     3a4:	83 ed       	ldi	r24, 0xD3	; 211
     3a6:	94 e0       	ldi	r25, 0x04	; 4
     3a8:	5b df       	rcall	.-330    	; 0x260 <receiveCANmesssage>
     3aa:	c3 ed       	ldi	r28, 0xD3	; 211
		printf("ID: %d\n\r",receivedCAN1.ID);
     3ac:	d4 e0       	ldi	r29, 0x04	; 4
     3ae:	89 81       	ldd	r24, Y+1	; 0x01
     3b0:	8f 93       	push	r24
     3b2:	88 81       	ld	r24, Y
     3b4:	8f 93       	push	r24
     3b6:	83 e1       	ldi	r24, 0x13	; 19
     3b8:	93 e0       	ldi	r25, 0x03	; 3
     3ba:	9f 93       	push	r25
     3bc:	8f 93       	push	r24
     3be:	5e d3       	rcall	.+1724   	; 0xa7c <printf>
     3c0:	86 ed       	ldi	r24, 0xD6	; 214
		printf("msg: %s\n\r", receivedCAN1.msg);
     3c2:	94 e0       	ldi	r25, 0x04	; 4
     3c4:	9f 93       	push	r25
     3c6:	8f 93       	push	r24
     3c8:	8c e1       	ldi	r24, 0x1C	; 28
     3ca:	93 e0       	ldi	r25, 0x03	; 3
     3cc:	9f 93       	push	r25
     3ce:	8f 93       	push	r24
     3d0:	55 d3       	rcall	.+1706   	; 0xa7c <printf>
     3d2:	8a 81       	ldd	r24, Y+2	; 0x02
		printf("msgLen: %d\n\r",receivedCAN1.length);
     3d4:	1f 92       	push	r1
     3d6:	8f 93       	push	r24
     3d8:	86 e2       	ldi	r24, 0x26	; 38
     3da:	93 e0       	ldi	r25, 0x03	; 3
     3dc:	9f 93       	push	r25
     3de:	8f 93       	push	r24
     3e0:	4d d3       	rcall	.+1690   	; 0xa7c <printf>
     3e2:	ed b7       	in	r30, 0x3d	; 61
		break;
     3e4:	fe b7       	in	r31, 0x3e	; 62
     3e6:	3c 96       	adiw	r30, 0x0c	; 12
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	f8 94       	cli
     3ec:	fe bf       	out	0x3e, r31	; 62
     3ee:	0f be       	out	0x3f, r0	; 63
     3f0:	ed bf       	out	0x3d, r30	; 61
     3f2:	95 c0       	rjmp	.+298    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
		
		case 2: receiveCANmesssage(&receivedCAN2, 0x70);	// Receive RXB1
     3f4:	60 e7       	ldi	r22, 0x70	; 112
     3f6:	84 ef       	ldi	r24, 0xF4	; 244
     3f8:	94 e0       	ldi	r25, 0x04	; 4
     3fa:	32 df       	rcall	.-412    	; 0x260 <receiveCANmesssage>
     3fc:	c4 ef       	ldi	r28, 0xF4	; 244
		printf("ID: %d\n\r",receivedCAN2.ID);
     3fe:	d4 e0       	ldi	r29, 0x04	; 4
     400:	89 81       	ldd	r24, Y+1	; 0x01
     402:	8f 93       	push	r24
     404:	88 81       	ld	r24, Y
     406:	8f 93       	push	r24
     408:	83 e1       	ldi	r24, 0x13	; 19
     40a:	93 e0       	ldi	r25, 0x03	; 3
     40c:	9f 93       	push	r25
     40e:	8f 93       	push	r24
     410:	35 d3       	rcall	.+1642   	; 0xa7c <printf>
		printf("msg: %s\n\r", receivedCAN2.msg);
     412:	87 ef       	ldi	r24, 0xF7	; 247
     414:	94 e0       	ldi	r25, 0x04	; 4
     416:	9f 93       	push	r25
     418:	8f 93       	push	r24
     41a:	8c e1       	ldi	r24, 0x1C	; 28
     41c:	93 e0       	ldi	r25, 0x03	; 3
     41e:	9f 93       	push	r25
     420:	8f 93       	push	r24
     422:	2c d3       	rcall	.+1624   	; 0xa7c <printf>
		printf("msgLen: %d\n\r",receivedCAN2.length);
     424:	8a 81       	ldd	r24, Y+2	; 0x02
     426:	1f 92       	push	r1
     428:	8f 93       	push	r24
     42a:	86 e2       	ldi	r24, 0x26	; 38
     42c:	93 e0       	ldi	r25, 0x03	; 3
     42e:	9f 93       	push	r25
     430:	8f 93       	push	r24
     432:	24 d3       	rcall	.+1608   	; 0xa7c <printf>
     434:	8d b7       	in	r24, 0x3d	; 61
		break;
     436:	9e b7       	in	r25, 0x3e	; 62
     438:	0c 96       	adiw	r24, 0x0c	; 12
     43a:	0f b6       	in	r0, 0x3f	; 63
     43c:	f8 94       	cli
     43e:	9e bf       	out	0x3e, r25	; 62
     440:	0f be       	out	0x3f, r0	; 63
     442:	8d bf       	out	0x3d, r24	; 61
		case 3: receiveCANmesssage(&receivedCAN1, 0x60);	// Receive RXB0
     444:	6c c0       	rjmp	.+216    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
     446:	60 e6       	ldi	r22, 0x60	; 96
     448:	83 ed       	ldi	r24, 0xD3	; 211
     44a:	94 e0       	ldi	r25, 0x04	; 4
     44c:	09 df       	rcall	.-494    	; 0x260 <receiveCANmesssage>
		receiveCANmesssage(&receivedCAN2, 0x70);	// Receive RXB1
     44e:	60 e7       	ldi	r22, 0x70	; 112
     450:	84 ef       	ldi	r24, 0xF4	; 244
     452:	94 e0       	ldi	r25, 0x04	; 4
     454:	05 df       	rcall	.-502    	; 0x260 <receiveCANmesssage>
     456:	c3 ed       	ldi	r28, 0xD3	; 211
		printf("ID: %d\n\r",receivedCAN1.ID);
     458:	d4 e0       	ldi	r29, 0x04	; 4
     45a:	89 81       	ldd	r24, Y+1	; 0x01
     45c:	8f 93       	push	r24
     45e:	88 81       	ld	r24, Y
     460:	8f 93       	push	r24
     462:	0f 2e       	mov	r0, r31
     464:	f3 e1       	ldi	r31, 0x13	; 19
     466:	ef 2e       	mov	r14, r31
     468:	f3 e0       	ldi	r31, 0x03	; 3
     46a:	ff 2e       	mov	r15, r31
     46c:	f0 2d       	mov	r31, r0
     46e:	ff 92       	push	r15
     470:	ef 92       	push	r14
     472:	04 d3       	rcall	.+1544   	; 0xa7c <printf>
		printf("msg: %s\n\r", receivedCAN1.msg);
     474:	86 ed       	ldi	r24, 0xD6	; 214
     476:	94 e0       	ldi	r25, 0x04	; 4
     478:	9f 93       	push	r25
     47a:	8f 93       	push	r24
     47c:	0c e1       	ldi	r16, 0x1C	; 28
     47e:	13 e0       	ldi	r17, 0x03	; 3
     480:	1f 93       	push	r17
     482:	0f 93       	push	r16
     484:	fb d2       	rcall	.+1526   	; 0xa7c <printf>
		printf("msgLen: %d\n\r",receivedCAN1.length);
     486:	8a 81       	ldd	r24, Y+2	; 0x02
     488:	1f 92       	push	r1
     48a:	8f 93       	push	r24
     48c:	c6 e2       	ldi	r28, 0x26	; 38
     48e:	d3 e0       	ldi	r29, 0x03	; 3
     490:	df 93       	push	r29
     492:	cf 93       	push	r28
     494:	f3 d2       	rcall	.+1510   	; 0xa7c <printf>
		
		printf("ID: %d\n\r",receivedCAN2.ID);
     496:	0f 2e       	mov	r0, r31
     498:	f4 ef       	ldi	r31, 0xF4	; 244
     49a:	cf 2e       	mov	r12, r31
     49c:	f4 e0       	ldi	r31, 0x04	; 4
     49e:	df 2e       	mov	r13, r31
     4a0:	f0 2d       	mov	r31, r0
     4a2:	f6 01       	movw	r30, r12
     4a4:	81 81       	ldd	r24, Z+1	; 0x01
     4a6:	8f 93       	push	r24
     4a8:	80 81       	ld	r24, Z
     4aa:	8f 93       	push	r24
     4ac:	ff 92       	push	r15
     4ae:	ef 92       	push	r14
		printf("msg: %s\n\r", receivedCAN2.msg);
     4b0:	e5 d2       	rcall	.+1482   	; 0xa7c <printf>
     4b2:	87 ef       	ldi	r24, 0xF7	; 247
     4b4:	94 e0       	ldi	r25, 0x04	; 4
     4b6:	9f 93       	push	r25
     4b8:	8f 93       	push	r24
     4ba:	1f 93       	push	r17
     4bc:	0f 93       	push	r16
     4be:	de d2       	rcall	.+1468   	; 0xa7c <printf>
		printf("msgLen: %d\n\r",receivedCAN2.length);
     4c0:	f6 01       	movw	r30, r12
     4c2:	82 81       	ldd	r24, Z+2	; 0x02
     4c4:	1f 92       	push	r1
     4c6:	8f 93       	push	r24
     4c8:	df 93       	push	r29
     4ca:	cf 93       	push	r28
		break;
     4cc:	d7 d2       	rcall	.+1454   	; 0xa7c <printf>
     4ce:	ed b7       	in	r30, 0x3d	; 61
     4d0:	fe b7       	in	r31, 0x3e	; 62
     4d2:	78 96       	adiw	r30, 0x18	; 24
     4d4:	0f b6       	in	r0, 0x3f	; 63
     4d6:	f8 94       	cli
     4d8:	fe bf       	out	0x3e, r31	; 62
		default: printf("ERROR!! Received message with error\n\r");
     4da:	0f be       	out	0x3f, r0	; 63
     4dc:	ed bf       	out	0x3d, r30	; 61
     4de:	1f c0       	rjmp	.+62     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
     4e0:	83 e3       	ldi	r24, 0x33	; 51
     4e2:	93 e0       	ldi	r25, 0x03	; 3
		printf("What do you want to do about this???\n\r");
     4e4:	9f 93       	push	r25
     4e6:	8f 93       	push	r24
     4e8:	c9 d2       	rcall	.+1426   	; 0xa7c <printf>
     4ea:	89 e5       	ldi	r24, 0x59	; 89
     4ec:	93 e0       	ldi	r25, 0x03	; 3
     4ee:	9f 93       	push	r25
		printf("ELFG: %x\n\r", MCP2515_readStatus(MCP_EFLG));
     4f0:	8f 93       	push	r24
     4f2:	c4 d2       	rcall	.+1416   	; 0xa7c <printf>
     4f4:	8d e2       	ldi	r24, 0x2D	; 45
     4f6:	f0 d1       	rcall	.+992    	; 0x8d8 <MCP2515_readStatus>
     4f8:	1f 92       	push	r1
     4fa:	8f 93       	push	r24
     4fc:	80 e8       	ldi	r24, 0x80	; 128
     4fe:	93 e0       	ldi	r25, 0x03	; 3
     500:	9f 93       	push	r25
     502:	8f 93       	push	r24
		MCP2515_bitMask(MCP_CANINTF, 0xa0, 0x00);
     504:	bb d2       	rcall	.+1398   	; 0xa7c <printf>
     506:	40 e0       	ldi	r20, 0x00	; 0
     508:	60 ea       	ldi	r22, 0xA0	; 160
     50a:	8c e2       	ldi	r24, 0x2C	; 44
     50c:	f2 d1       	rcall	.+996    	; 0x8f2 <MCP2515_bitMask>
		break;
     50e:	8d b7       	in	r24, 0x3d	; 61
     510:	9e b7       	in	r25, 0x3e	; 62
     512:	08 96       	adiw	r24, 0x08	; 8
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	f8 94       	cli
     518:	9e bf       	out	0x3e, r25	; 62
     51a:	0f be       	out	0x3f, r0	; 63
     51c:	8d bf       	out	0x3d, r24	; 61
	} // End of switch-Case
	
	
	// clear interrupt register
	MCP2515_bitMask(MCP_CANINTF, 0x03, 0x00);
     51e:	40 e0       	ldi	r20, 0x00	; 0
     520:	63 e0       	ldi	r22, 0x03	; 3
     522:	8c e2       	ldi	r24, 0x2C	; 44
     524:	e6 d1       	rcall	.+972    	; 0x8f2 <MCP2515_bitMask>
     526:	df 91       	pop	r29
}	
     528:	cf 91       	pop	r28
     52a:	1f 91       	pop	r17
     52c:	0f 91       	pop	r16
     52e:	ff 90       	pop	r15
     530:	ef 90       	pop	r14
     532:	df 90       	pop	r13
     534:	cf 90       	pop	r12
     536:	08 95       	ret

00000538 <__vector_4>:
     538:	1f 92       	push	r1


ISR(INT3_vect)
{
     53a:	0f 92       	push	r0
     53c:	0f b6       	in	r0, 0x3f	; 63
     53e:	0f 92       	push	r0
     540:	11 24       	eor	r1, r1
     542:	8f 93       	push	r24
     544:	9f 93       	push	r25
	CAN_interrupt = 1;
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	90 93 bc 04 	sts	0x04BC, r25	; 0x8004bc <CAN_interrupt+0x1>
     54e:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <CAN_interrupt>

}
     552:	9f 91       	pop	r25
     554:	8f 91       	pop	r24
     556:	0f 90       	pop	r0
     558:	0f be       	out	0x3f, r0	; 63
     55a:	0f 90       	pop	r0
     55c:	1f 90       	pop	r1
     55e:	18 95       	reti

00000560 <main>:

int main()
{
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	00 d0       	rcall	.+0      	; 0x566 <main+0x6>
     566:	1f 92       	push	r1
     568:	cd b7       	in	r28, 0x3d	; 61
     56a:	de b7       	in	r29, 0x3e	; 62
	
// ----- Initialization ----- //
	USART_Init( MYUBRR );
     56c:	87 e6       	ldi	r24, 0x67	; 103
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	20 d2       	rcall	.+1088   	; 0x9b2 <USART_Init>
	fdevopen(&USART_Transmit, &USART_Receive);
     572:	64 ee       	ldi	r22, 0xE4	; 228
     574:	74 e0       	ldi	r23, 0x04	; 4
     576:	8c ee       	ldi	r24, 0xEC	; 236
     578:	94 e0       	ldi	r25, 0x04	; 4
	InterruptInit();
     57a:	36 d2       	rcall	.+1132   	; 0x9e8 <fdevopen>
     57c:	d3 de       	rcall	.-602    	; 0x324 <InterruptInit>
	//ExernalMemoryInit();
	//adcInit();
	//OLEDInit();
	//menuInit();
	SPI_MasterInit();
     57e:	03 d2       	rcall	.+1030   	; 0x986 <SPI_MasterInit>
     580:	8b e8       	ldi	r24, 0x8B	; 139
	
	printf("Initialization of MCP2515...\n\r");
     582:	93 e0       	ldi	r25, 0x03	; 3
     584:	9f 93       	push	r25
     586:	8f 93       	push	r24
     588:	79 d2       	rcall	.+1266   	; 0xa7c <printf>
	MCP2515init(MODE_LOOPBACK);	
     58a:	80 e4       	ldi	r24, 0x40	; 64
     58c:	c6 d1       	rcall	.+908    	; 0x91a <MCP2515init>
     58e:	ee ed       	ldi	r30, 0xDE	; 222

	
	
	uint8_t status, dataReceive;	
	
	data.ID = 1;
     590:	f4 e0       	ldi	r31, 0x04	; 4
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	91 83       	std	Z+1, r25	; 0x01
     598:	80 83       	st	Z, r24
     59a:	58 e4       	ldi	r21, 0x48	; 72
	data.msg[0] = 'H';
     59c:	53 83       	std	Z+3, r21	; 0x03
     59e:	25 e6       	ldi	r18, 0x65	; 101
	data.msg[1] = 'e';
     5a0:	24 83       	std	Z+4, r18	; 0x04
     5a2:	89 e6       	ldi	r24, 0x69	; 105
	data.msg[2] = 'i';
     5a4:	85 83       	std	Z+5, r24	; 0x05
     5a6:	a1 ee       	ldi	r26, 0xE1	; 225
	data.length = strlen(data.msg);
     5a8:	b4 e0       	ldi	r27, 0x04	; 4
     5aa:	0d 90       	ld	r0, X+
     5ac:	00 20       	and	r0, r0
     5ae:	e9 f7       	brne	.-6      	; 0x5aa <main+0x4a>
     5b0:	cd 01       	movw	r24, r26
     5b2:	82 5e       	subi	r24, 0xE2	; 226
     5b4:	94 40       	sbci	r25, 0x04	; 4
     5b6:	82 83       	std	Z+2, r24	; 0x02
     5b8:	ed eb       	ldi	r30, 0xBD	; 189
	
	data1.ID = 2;
     5ba:	f4 e0       	ldi	r31, 0x04	; 4
     5bc:	82 e0       	ldi	r24, 0x02	; 2
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	91 83       	std	Z+1, r25	; 0x01
     5c2:	80 83       	st	Z, r24
     5c4:	86 e7       	ldi	r24, 0x76	; 118
	data1.msg[0] = 'v';
     5c6:	83 83       	std	Z+3, r24	; 0x03
     5c8:	24 83       	std	Z+4, r18	; 0x04
	data1.msg[1] = 'e';
     5ca:	32 e7       	ldi	r19, 0x72	; 114
	data1.msg[2] = 'r';
     5cc:	35 83       	std	Z+5, r19	; 0x05
     5ce:	44 e6       	ldi	r20, 0x64	; 100
	data1.msg[3] = 'd';
     5d0:	46 83       	std	Z+6, r20	; 0x06
     5d2:	27 83       	std	Z+7, r18	; 0x07
	data1.msg[4] = 'e';
     5d4:	8e e6       	ldi	r24, 0x6E	; 110
	data1.msg[5] = 'n';
     5d6:	80 87       	std	Z+8, r24	; 0x08
     5d8:	8a e3       	ldi	r24, 0x3A	; 58
	data1.msg[6] = ':';	
     5da:	81 87       	std	Z+9, r24	; 0x09
     5dc:	89 e2       	ldi	r24, 0x29	; 41
	data1.msg[7] = ')';
     5de:	82 87       	std	Z+10, r24	; 0x0a
     5e0:	a0 ec       	ldi	r26, 0xC0	; 192
	data1.length = strlen(data1.msg);
     5e2:	b4 e0       	ldi	r27, 0x04	; 4
     5e4:	0d 90       	ld	r0, X+
     5e6:	00 20       	and	r0, r0
     5e8:	e9 f7       	brne	.-6      	; 0x5e4 <main+0x84>
     5ea:	cd 01       	movw	r24, r26
     5ec:	81 5c       	subi	r24, 0xC1	; 193
     5ee:	94 40       	sbci	r25, 0x04	; 4
     5f0:	82 83       	std	Z+2, r24	; 0x02
     5f2:	e8 ec       	ldi	r30, 0xC8	; 200
	
	data2.ID = 3;
     5f4:	f4 e0       	ldi	r31, 0x04	; 4
     5f6:	83 e0       	ldi	r24, 0x03	; 3
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	91 83       	std	Z+1, r25	; 0x01
     5fc:	80 83       	st	Z, r24
     5fe:	81 e3       	ldi	r24, 0x31	; 49
	data2.msg[0] = '1';
     600:	83 83       	std	Z+3, r24	; 0x03
     602:	82 e3       	ldi	r24, 0x32	; 50
	data2.msg[1] = '2';
     604:	84 83       	std	Z+4, r24	; 0x04
     606:	83 e3       	ldi	r24, 0x33	; 51
	data2.msg[2] = '3';
     608:	85 83       	std	Z+5, r24	; 0x05
     60a:	85 e3       	ldi	r24, 0x35	; 53
	data2.msg[3] = '5';
     60c:	86 83       	std	Z+6, r24	; 0x06
     60e:	87 83       	std	Z+7, r24	; 0x07
	data2.msg[4] = '5';
     610:	86 e3       	ldi	r24, 0x36	; 54
	data2.msg[5] = '6';
     612:	80 87       	std	Z+8, r24	; 0x08
     614:	87 e3       	ldi	r24, 0x37	; 55
	data2.msg[6] = '7';
     616:	81 87       	std	Z+9, r24	; 0x09
     618:	88 e3       	ldi	r24, 0x38	; 56
	data2.msg[7] = '8';
     61a:	82 87       	std	Z+10, r24	; 0x0a
     61c:	ab ec       	ldi	r26, 0xCB	; 203
	data2.length = strlen(data2.msg);
     61e:	b4 e0       	ldi	r27, 0x04	; 4
     620:	0d 90       	ld	r0, X+
     622:	00 20       	and	r0, r0
     624:	e9 f7       	brne	.-6      	; 0x620 <main+0xc0>
     626:	cd 01       	movw	r24, r26
     628:	8c 5c       	subi	r24, 0xCC	; 204
     62a:	94 40       	sbci	r25, 0x04	; 4
     62c:	82 83       	std	Z+2, r24	; 0x02
     62e:	e9 ee       	ldi	r30, 0xE9	; 233
	
	
	data3.ID = 4;
     630:	f4 e0       	ldi	r31, 0x04	; 4
     632:	84 e0       	ldi	r24, 0x04	; 4
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	91 83       	std	Z+1, r25	; 0x01
     638:	80 83       	st	Z, r24
     63a:	53 83       	std	Z+3, r21	; 0x03
	data3.msg[0] = 'H';
     63c:	81 e6       	ldi	r24, 0x61	; 97
	data3.msg[1] = 'a';
     63e:	84 83       	std	Z+4, r24	; 0x04
     640:	45 83       	std	Z+5, r20	; 0x05
	data3.msg[2] = 'd';
     642:	26 83       	std	Z+6, r18	; 0x06
	data3.msg[3] = 'e';
     644:	90 e2       	ldi	r25, 0x20	; 32
	data3.msg[4] = ' ';
     646:	97 83       	std	Z+7, r25	; 0x07
     648:	92 e6       	ldi	r25, 0x62	; 98
	data3.msg[5] = 'b';
     64a:	90 87       	std	Z+8, r25	; 0x08
     64c:	31 87       	std	Z+9, r19	; 0x09
	data3.msg[6] = 'r';
     64e:	82 87       	std	Z+10, r24	; 0x0a
	data3.msg[7] = 'a';
     650:	ac ee       	ldi	r26, 0xEC	; 236
	data3.length = strlen(data3.msg);
     652:	b4 e0       	ldi	r27, 0x04	; 4
     654:	0d 90       	ld	r0, X+
     656:	00 20       	and	r0, r0
     658:	e9 f7       	brne	.-6      	; 0x654 <main+0xf4>
     65a:	cd 01       	movw	r24, r26
     65c:	8d 5e       	subi	r24, 0xED	; 237
     65e:	94 40       	sbci	r25, 0x04	; 4
     660:	82 83       	std	Z+2, r24	; 0x02
     662:	0f 90       	pop	r0
     664:	0f 90       	pop	r0
     666:	0f 2e       	mov	r0, r31
	while(1)
	{
		
		for(int i = 0; i < 4; i++)
		{
			printf("Hei");
     668:	fa ea       	ldi	r31, 0xAA	; 170
     66a:	4f 2e       	mov	r4, r31
     66c:	f3 e0       	ldi	r31, 0x03	; 3
     66e:	5f 2e       	mov	r5, r31
     670:	f0 2d       	mov	r31, r0
     672:	0f 2e       	mov	r0, r31
				break;
				case 1: 
				printf("\n\n\r************SENDING MSG: data1 *************\n\r");

				// CAN struct test
				printf("ID: %d\n\r",data1.ID);
     674:	f3 e1       	ldi	r31, 0x13	; 19
     676:	2f 2e       	mov	r2, r31
     678:	f3 e0       	ldi	r31, 0x03	; 3
     67a:	3f 2e       	mov	r3, r31
     67c:	f0 2d       	mov	r31, r0
     67e:	0f 2e       	mov	r0, r31
				printf("msg: %s\n\r", data1.msg);
     680:	fc e1       	ldi	r31, 0x1C	; 28
     682:	af 2e       	mov	r10, r31
     684:	f3 e0       	ldi	r31, 0x03	; 3
     686:	bf 2e       	mov	r11, r31
     688:	f0 2d       	mov	r31, r0
     68a:	0f 2e       	mov	r0, r31
				printf("msgLen: %d\n\r",data1.length);
     68c:	f6 e2       	ldi	r31, 0x26	; 38
     68e:	cf 2e       	mov	r12, r31
     690:	f3 e0       	ldi	r31, 0x03	; 3
     692:	df 2e       	mov	r13, r31
     694:	f0 2d       	mov	r31, r0
     696:	8d eb       	ldi	r24, 0xBD	; 189
				break;
				case 1: 
				printf("\n\n\r************SENDING MSG: data1 *************\n\r");

				// CAN struct test
				printf("ID: %d\n\r",data1.ID);
     698:	94 e0       	ldi	r25, 0x04	; 4
     69a:	89 83       	std	Y+1, r24	; 0x01
     69c:	9a 83       	std	Y+2, r25	; 0x02
     69e:	81 e0       	ldi	r24, 0x01	; 1
	CAN_interrupt = 1;

}

int main()
{
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	0f 2e       	mov	r0, r31
			{
				case 0: 
				printf("\n\n\r************SENDING MSG: data *************\n\r");

				// CAN struct test
				printf("ID: %d\n\r",data.ID);
     6a4:	fe ed       	ldi	r31, 0xDE	; 222
     6a6:	ef 2e       	mov	r14, r31
     6a8:	f4 e0       	ldi	r31, 0x04	; 4
     6aa:	ff 2e       	mov	r15, r31
     6ac:	f0 2d       	mov	r31, r0
     6ae:	0f 2e       	mov	r0, r31
				printf("msg: %s\n\r", data.msg);
     6b0:	f1 ee       	ldi	r31, 0xE1	; 225
     6b2:	6f 2e       	mov	r6, r31
     6b4:	f4 e0       	ldi	r31, 0x04	; 4
     6b6:	7f 2e       	mov	r7, r31
     6b8:	f0 2d       	mov	r31, r0
     6ba:	08 ec       	ldi	r16, 0xC8	; 200
				break;
				case 2: 
				printf("\n\n\r************SENDING MSG: data2 *************\n\r");

				// CAN struct test
				printf("ID: %d\n\r",data2.ID);
     6bc:	14 e0       	ldi	r17, 0x04	; 4
     6be:	9c 83       	std	Y+4, r25	; 0x04
     6c0:	8b 83       	std	Y+3, r24	; 0x03
     6c2:	05 c0       	rjmp	.+10     	; 0x6ce <main+0x16e>
     6c4:	eb 81       	ldd	r30, Y+3	; 0x03
     6c6:	fc 81       	ldd	r31, Y+4	; 0x04
     6c8:	31 96       	adiw	r30, 0x01	; 1
     6ca:	fc 83       	std	Y+4, r31	; 0x04
     6cc:	eb 83       	std	Y+3, r30	; 0x03
     6ce:	8b 80       	ldd	r8, Y+3	; 0x03
     6d0:	9c 80       	ldd	r9, Y+4	; 0x04
     6d2:	f1 e0       	ldi	r31, 0x01	; 1
     6d4:	8f 1a       	sub	r8, r31
	while(1)
	{
		
		for(int i = 0; i < 4; i++)
		{
			printf("Hei");
     6d6:	91 08       	sbc	r9, r1
     6d8:	5f 92       	push	r5
     6da:	4f 92       	push	r4
     6dc:	cf d1       	rcall	.+926    	; 0xa7c <printf>
			//if(CAN_interrupt == 1)
				handleCANInterrupt();
     6de:	2f de       	rcall	.-930    	; 0x33e <handleCANInterrupt>
     6e0:	0f 90       	pop	r0
			
			switch (i)
     6e2:	0f 90       	pop	r0
     6e4:	21 e0       	ldi	r18, 0x01	; 1
     6e6:	82 16       	cp	r8, r18
     6e8:	91 04       	cpc	r9, r1
     6ea:	69 f1       	breq	.+90     	; 0x746 <main+0x1e6>
     6ec:	58 f0       	brcs	.+22     	; 0x704 <main+0x1a4>
     6ee:	92 e0       	ldi	r25, 0x02	; 2
     6f0:	89 16       	cp	r8, r25
     6f2:	91 04       	cpc	r9, r1
     6f4:	09 f4       	brne	.+2      	; 0x6f8 <main+0x198>
     6f6:	4d c0       	rjmp	.+154    	; 0x792 <main+0x232>
     6f8:	e3 e0       	ldi	r30, 0x03	; 3
     6fa:	8e 16       	cp	r8, r30
     6fc:	91 04       	cpc	r9, r1
     6fe:	09 f4       	brne	.+2      	; 0x702 <main+0x1a2>
     700:	6b c0       	rjmp	.+214    	; 0x7d8 <main+0x278>
     702:	99 c0       	rjmp	.+306    	; 0x836 <main+0x2d6>
			{
				case 0: 
				printf("\n\n\r************SENDING MSG: data *************\n\r");
     704:	8e ea       	ldi	r24, 0xAE	; 174
     706:	93 e0       	ldi	r25, 0x03	; 3
     708:	9f 93       	push	r25
     70a:	8f 93       	push	r24
     70c:	b7 d1       	rcall	.+878    	; 0xa7c <printf>

				// CAN struct test
				printf("ID: %d\n\r",data.ID);
     70e:	f7 01       	movw	r30, r14
     710:	81 81       	ldd	r24, Z+1	; 0x01
     712:	8f 93       	push	r24
     714:	80 81       	ld	r24, Z
     716:	8f 93       	push	r24
     718:	3f 92       	push	r3
     71a:	2f 92       	push	r2
     71c:	af d1       	rcall	.+862    	; 0xa7c <printf>
				printf("msg: %s\n\r", data.msg);
     71e:	7f 92       	push	r7
     720:	6f 92       	push	r6
     722:	bf 92       	push	r11
     724:	af 92       	push	r10
				printf("msgLen: %d\n\r",data.length);
     726:	aa d1       	rcall	.+852    	; 0xa7c <printf>
     728:	f7 01       	movw	r30, r14
     72a:	82 81       	ldd	r24, Z+2	; 0x02
     72c:	1f 92       	push	r1
     72e:	8f 93       	push	r24
     730:	df 92       	push	r13
     732:	cf 92       	push	r12
     734:	a3 d1       	rcall	.+838    	; 0xa7c <printf>
				sendCANmessage(&data);
     736:	c7 01       	movw	r24, r14
     738:	f6 dc       	rcall	.-1556   	; 0x126 <sendCANmessage>
				break;
     73a:	0f b6       	in	r0, 0x3f	; 63
     73c:	f8 94       	cli
     73e:	de bf       	out	0x3e, r29	; 62
     740:	0f be       	out	0x3f, r0	; 63
     742:	cd bf       	out	0x3d, r28	; 61
     744:	90 c0       	rjmp	.+288    	; 0x866 <main+0x306>
				case 1: 
				printf("\n\n\r************SENDING MSG: data1 *************\n\r");
     746:	ef ed       	ldi	r30, 0xDF	; 223
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	ff 93       	push	r31
     74c:	ef 93       	push	r30
     74e:	96 d1       	rcall	.+812    	; 0xa7c <printf>

				// CAN struct test
				printf("ID: %d\n\r",data1.ID);
     750:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <data1+0x1>
     754:	8f 93       	push	r24
     756:	ed eb       	ldi	r30, 0xBD	; 189
     758:	f4 e0       	ldi	r31, 0x04	; 4
     75a:	80 81       	ld	r24, Z
     75c:	8f 93       	push	r24
     75e:	3f 92       	push	r3
     760:	2f 92       	push	r2
				printf("msg: %s\n\r", data1.msg);
     762:	8c d1       	rcall	.+792    	; 0xa7c <printf>
     764:	80 ec       	ldi	r24, 0xC0	; 192
     766:	94 e0       	ldi	r25, 0x04	; 4
     768:	9f 93       	push	r25
     76a:	8f 93       	push	r24
     76c:	bf 92       	push	r11
     76e:	af 92       	push	r10
				printf("msgLen: %d\n\r",data1.length);
     770:	85 d1       	rcall	.+778    	; 0xa7c <printf>
     772:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <data1+0x2>
     776:	1f 92       	push	r1
     778:	8f 93       	push	r24
     77a:	df 92       	push	r13
     77c:	cf 92       	push	r12
				sendCANmessage(&data1);
     77e:	7e d1       	rcall	.+764    	; 0xa7c <printf>
     780:	89 81       	ldd	r24, Y+1	; 0x01
     782:	9a 81       	ldd	r25, Y+2	; 0x02
     784:	d0 dc       	rcall	.-1632   	; 0x126 <sendCANmessage>
				break;
     786:	0f b6       	in	r0, 0x3f	; 63
     788:	f8 94       	cli
     78a:	de bf       	out	0x3e, r29	; 62
     78c:	0f be       	out	0x3f, r0	; 63
     78e:	cd bf       	out	0x3d, r28	; 61
				case 2: 
				printf("\n\n\r************SENDING MSG: data2 *************\n\r");
     790:	6a c0       	rjmp	.+212    	; 0x866 <main+0x306>
     792:	e1 e1       	ldi	r30, 0x11	; 17
     794:	f4 e0       	ldi	r31, 0x04	; 4
     796:	ff 93       	push	r31
     798:	ef 93       	push	r30

				// CAN struct test
				printf("ID: %d\n\r",data2.ID);
     79a:	70 d1       	rcall	.+736    	; 0xa7c <printf>
     79c:	f8 01       	movw	r30, r16
     79e:	81 81       	ldd	r24, Z+1	; 0x01
     7a0:	8f 93       	push	r24
     7a2:	80 81       	ld	r24, Z
     7a4:	8f 93       	push	r24
     7a6:	3f 92       	push	r3
				printf("msg: %s\n\r", data2.msg);
     7a8:	2f 92       	push	r2
     7aa:	68 d1       	rcall	.+720    	; 0xa7c <printf>
     7ac:	8b ec       	ldi	r24, 0xCB	; 203
     7ae:	94 e0       	ldi	r25, 0x04	; 4
     7b0:	9f 93       	push	r25
     7b2:	8f 93       	push	r24
     7b4:	bf 92       	push	r11
				printf("msgLen: %d\n\r",data2.length);
     7b6:	af 92       	push	r10
     7b8:	61 d1       	rcall	.+706    	; 0xa7c <printf>
     7ba:	f8 01       	movw	r30, r16
     7bc:	82 81       	ldd	r24, Z+2	; 0x02
     7be:	1f 92       	push	r1
     7c0:	8f 93       	push	r24
     7c2:	df 92       	push	r13
     7c4:	cf 92       	push	r12
				sendCANmessage(&data2);
     7c6:	5a d1       	rcall	.+692    	; 0xa7c <printf>
     7c8:	c8 01       	movw	r24, r16
				break;
     7ca:	ad dc       	rcall	.-1702   	; 0x126 <sendCANmessage>
     7cc:	0f b6       	in	r0, 0x3f	; 63
     7ce:	f8 94       	cli
     7d0:	de bf       	out	0x3e, r29	; 62
     7d2:	0f be       	out	0x3f, r0	; 63
				case 3: 
				printf("\n\n\r************SENDING MSG: data3 *************\n\r");
     7d4:	cd bf       	out	0x3d, r28	; 61
     7d6:	47 c0       	rjmp	.+142    	; 0x866 <main+0x306>
     7d8:	83 e4       	ldi	r24, 0x43	; 67
     7da:	94 e0       	ldi	r25, 0x04	; 4
     7dc:	9f 93       	push	r25

				// CAN struct test
				printf("ID: %d\n\r",data3.ID);
     7de:	8f 93       	push	r24
     7e0:	4d d1       	rcall	.+666    	; 0xa7c <printf>
     7e2:	80 91 ea 04 	lds	r24, 0x04EA	; 0x8004ea <data3+0x1>
     7e6:	8f 93       	push	r24
     7e8:	e9 ee       	ldi	r30, 0xE9	; 233
     7ea:	f4 e0       	ldi	r31, 0x04	; 4
     7ec:	80 81       	ld	r24, Z
     7ee:	8f 93       	push	r24
     7f0:	3f 92       	push	r3
				printf("msg: %s\n\r", data3.msg);
     7f2:	2f 92       	push	r2
     7f4:	43 d1       	rcall	.+646    	; 0xa7c <printf>
     7f6:	8c ee       	ldi	r24, 0xEC	; 236
     7f8:	94 e0       	ldi	r25, 0x04	; 4
     7fa:	9f 93       	push	r25
     7fc:	8f 93       	push	r24
     7fe:	bf 92       	push	r11
     800:	af 92       	push	r10
				printf("msgLen: %d\n\r",data3.length);
     802:	3c d1       	rcall	.+632    	; 0xa7c <printf>
     804:	80 91 eb 04 	lds	r24, 0x04EB	; 0x8004eb <data3+0x2>
     808:	1f 92       	push	r1
     80a:	8f 93       	push	r24
     80c:	df 92       	push	r13
     80e:	cf 92       	push	r12
     810:	35 d1       	rcall	.+618    	; 0xa7c <printf>
				sendCANmessage(&data3); 
     812:	89 ee       	ldi	r24, 0xE9	; 233
     814:	94 e0       	ldi	r25, 0x04	; 4
     816:	87 dc       	rcall	.-1778   	; 0x126 <sendCANmessage>
     818:	ff ef       	ldi	r31, 0xFF	; 255
     81a:	29 e6       	ldi	r18, 0x69	; 105
     81c:	88 e1       	ldi	r24, 0x18	; 24
     81e:	f1 50       	subi	r31, 0x01	; 1
     820:	20 40       	sbci	r18, 0x00	; 0
     822:	80 40       	sbci	r24, 0x00	; 0
     824:	e1 f7       	brne	.-8      	; 0x81e <main+0x2be>
     826:	00 c0       	rjmp	.+0      	; 0x828 <main+0x2c8>
     828:	00 00       	nop
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	f8 94       	cli
     82e:	de bf       	out	0x3e, r29	; 62
     830:	0f be       	out	0x3f, r0	; 63
     832:	cd bf       	out	0x3d, r28	; 61
     834:	0e c0       	rjmp	.+28     	; 0x852 <main+0x2f2>
     836:	ff ef       	ldi	r31, 0xFF	; 255
     838:	29 e6       	ldi	r18, 0x69	; 105
     83a:	88 e1       	ldi	r24, 0x18	; 24
     83c:	f1 50       	subi	r31, 0x01	; 1
     83e:	20 40       	sbci	r18, 0x00	; 0
     840:	80 40       	sbci	r24, 0x00	; 0
     842:	e1 f7       	brne	.-8      	; 0x83c <main+0x2dc>
     844:	00 c0       	rjmp	.+0      	; 0x846 <main+0x2e6>
     846:	00 00       	nop
     848:	eb 81       	ldd	r30, Y+3	; 0x03

	
	while(1)
	{
		
		for(int i = 0; i < 4; i++)
     84a:	fc 81       	ldd	r31, Y+4	; 0x04
     84c:	34 97       	sbiw	r30, 0x04	; 4
     84e:	0c f4       	brge	.+2      	; 0x852 <main+0x2f2>
     850:	39 cf       	rjmp	.-398    	; 0x6c4 <main+0x164>
     852:	ff ef       	ldi	r31, 0xFF	; 255
     854:	23 ed       	ldi	r18, 0xD3	; 211
     856:	80 e3       	ldi	r24, 0x30	; 48
     858:	f1 50       	subi	r31, 0x01	; 1
     85a:	20 40       	sbci	r18, 0x00	; 0
     85c:	80 40       	sbci	r24, 0x00	; 0
     85e:	e1 f7       	brne	.-8      	; 0x858 <main+0x2f8>
     860:	00 c0       	rjmp	.+0      	; 0x862 <main+0x302>
     862:	00 00       	nop
     864:	1c cf       	rjmp	.-456    	; 0x69e <main+0x13e>
     866:	9f ef       	ldi	r25, 0xFF	; 255
     868:	e9 e6       	ldi	r30, 0x69	; 105
     86a:	f8 e1       	ldi	r31, 0x18	; 24
     86c:	91 50       	subi	r25, 0x01	; 1
     86e:	e0 40       	sbci	r30, 0x00	; 0
     870:	f0 40       	sbci	r31, 0x00	; 0
     872:	e1 f7       	brne	.-8      	; 0x86c <main+0x30c>
     874:	00 c0       	rjmp	.+0      	; 0x876 <main+0x316>
     876:	00 00       	nop
     878:	25 cf       	rjmp	.-438    	; 0x6c4 <main+0x164>

0000087a <MCP2515_Read>:
     87a:	cf 93       	push	r28
		SPI_write(MCP_RX_STATUS);

		status = SPI_read();
		SPI_SlaveDeselect();
		return status;
}
     87c:	c8 2f       	mov	r28, r24
     87e:	95 d0       	rcall	.+298    	; 0x9aa <SPI_SlaveSelect>
     880:	83 e0       	ldi	r24, 0x03	; 3
     882:	87 d0       	rcall	.+270    	; 0x992 <SPI_write>
     884:	8c 2f       	mov	r24, r28
     886:	85 d0       	rcall	.+266    	; 0x992 <SPI_write>
     888:	89 d0       	rcall	.+274    	; 0x99c <SPI_read>
     88a:	c8 2f       	mov	r28, r24
     88c:	90 d0       	rcall	.+288    	; 0x9ae <SPI_SlaveDeselect>
     88e:	8c 2f       	mov	r24, r28
     890:	cf 91       	pop	r28
     892:	08 95       	ret

00000894 <MCP2515_Write>:
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
     898:	d8 2f       	mov	r29, r24
     89a:	c6 2f       	mov	r28, r22
     89c:	86 d0       	rcall	.+268    	; 0x9aa <SPI_SlaveSelect>
     89e:	82 e0       	ldi	r24, 0x02	; 2
     8a0:	78 d0       	rcall	.+240    	; 0x992 <SPI_write>
     8a2:	8d 2f       	mov	r24, r29
     8a4:	76 d0       	rcall	.+236    	; 0x992 <SPI_write>
     8a6:	8c 2f       	mov	r24, r28
     8a8:	74 d0       	rcall	.+232    	; 0x992 <SPI_write>
     8aa:	81 d0       	rcall	.+258    	; 0x9ae <SPI_SlaveDeselect>
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	08 95       	ret

000008b2 <MCP2515_reset>:
     8b2:	7b d0       	rcall	.+246    	; 0x9aa <SPI_SlaveSelect>
     8b4:	80 ec       	ldi	r24, 0xC0	; 192
     8b6:	6d d0       	rcall	.+218    	; 0x992 <SPI_write>
     8b8:	7a d0       	rcall	.+244    	; 0x9ae <SPI_SlaveDeselect>
     8ba:	83 ec       	ldi	r24, 0xC3	; 195
     8bc:	99 e0       	ldi	r25, 0x09	; 9
     8be:	01 97       	sbiw	r24, 0x01	; 1
     8c0:	f1 f7       	brne	.-4      	; 0x8be <MCP2515_reset+0xc>
     8c2:	00 c0       	rjmp	.+0      	; 0x8c4 <MCP2515_reset+0x12>
     8c4:	00 00       	nop
     8c6:	08 95       	ret

000008c8 <MCP2515_RTS>:

// Request-to-Send TX0-2 or all
void MCP2515_RTS(uint8_t TXn)
{
     8c8:	cf 93       	push	r28
     8ca:	c8 2f       	mov	r28, r24
	SPI_SlaveSelect();
     8cc:	6e d0       	rcall	.+220    	; 0x9aa <SPI_SlaveSelect>
	//SPI_write(MCP_WRITE);
	SPI_write(TXn);
     8ce:	8c 2f       	mov	r24, r28
	SPI_SlaveDeselect();
     8d0:	60 d0       	rcall	.+192    	; 0x992 <SPI_write>
     8d2:	6d d0       	rcall	.+218    	; 0x9ae <SPI_SlaveDeselect>
}
     8d4:	cf 91       	pop	r28
     8d6:	08 95       	ret

000008d8 <MCP2515_readStatus>:


// Return status of given register
uint8_t MCP2515_readStatus(uint8_t reg)
{
     8d8:	cf 93       	push	r28
     8da:	c8 2f       	mov	r28, r24
	uint8_t status = 0;
	SPI_SlaveSelect();
     8dc:	66 d0       	rcall	.+204    	; 0x9aa <SPI_SlaveSelect>
	SPI_write(MCP_READ);
     8de:	83 e0       	ldi	r24, 0x03	; 3
     8e0:	58 d0       	rcall	.+176    	; 0x992 <SPI_write>
	SPI_write(reg);
     8e2:	8c 2f       	mov	r24, r28
     8e4:	56 d0       	rcall	.+172    	; 0x992 <SPI_write>
	
	status = SPI_read();
     8e6:	5a d0       	rcall	.+180    	; 0x99c <SPI_read>
     8e8:	c8 2f       	mov	r28, r24
     8ea:	61 d0       	rcall	.+194    	; 0x9ae <SPI_SlaveDeselect>
	SPI_SlaveDeselect();
     8ec:	8c 2f       	mov	r24, r28
     8ee:	cf 91       	pop	r28
	return status;
}
     8f0:	08 95       	ret

000008f2 <MCP2515_bitMask>:
     8f2:	1f 93       	push	r17
     8f4:	cf 93       	push	r28



void MCP2515_bitMask(uint8_t reg, uint8_t bitMask, uint8_t data)
{
     8f6:	df 93       	push	r29
     8f8:	18 2f       	mov	r17, r24
     8fa:	d6 2f       	mov	r29, r22
     8fc:	c4 2f       	mov	r28, r20
	SPI_SlaveSelect();
     8fe:	55 d0       	rcall	.+170    	; 0x9aa <SPI_SlaveSelect>
	SPI_write(MCP_BITMOD);
     900:	85 e0       	ldi	r24, 0x05	; 5
     902:	47 d0       	rcall	.+142    	; 0x992 <SPI_write>
	SPI_write(reg);
     904:	81 2f       	mov	r24, r17
     906:	45 d0       	rcall	.+138    	; 0x992 <SPI_write>
	SPI_write(bitMask); //
     908:	8d 2f       	mov	r24, r29
	SPI_write(data);
     90a:	43 d0       	rcall	.+134    	; 0x992 <SPI_write>
     90c:	8c 2f       	mov	r24, r28
     90e:	41 d0       	rcall	.+130    	; 0x992 <SPI_write>
	SPI_SlaveDeselect();
     910:	4e d0       	rcall	.+156    	; 0x9ae <SPI_SlaveDeselect>
     912:	df 91       	pop	r29
}
     914:	cf 91       	pop	r28
     916:	1f 91       	pop	r17
     918:	08 95       	ret

0000091a <MCP2515init>:
     91a:	cf 93       	push	r28

void MCP2515init( uint8_t MODE )
{
     91c:	df 93       	push	r29
     91e:	d8 2f       	mov	r29, r24
	uint8_t state;
	MCP2515_reset();
     920:	c8 df       	rcall	.-112    	; 0x8b2 <MCP2515_reset>
	
	state = MCP2515_readStatus(MCP_CANSTAT);
     922:	8e e0       	ldi	r24, 0x0E	; 14
     924:	d9 df       	rcall	.-78     	; 0x8d8 <MCP2515_readStatus>
     926:	c8 2f       	mov	r28, r24
	printf("CANSTAT: %x\n\r", state);
     928:	1f 92       	push	r1
     92a:	8f 93       	push	r24
     92c:	85 e7       	ldi	r24, 0x75	; 117
     92e:	94 e0       	ldi	r25, 0x04	; 4
     930:	9f 93       	push	r25
     932:	8f 93       	push	r24
     934:	a3 d0       	rcall	.+326    	; 0xa7c <printf>
	
	if (state & MODE_MASK != MODE_CONFIG)
     936:	0f 90       	pop	r0
     938:	0f 90       	pop	r0
     93a:	0f 90       	pop	r0
     93c:	0f 90       	pop	r0
     93e:	c0 ff       	sbrs	r28, 0
     940:	07 c0       	rjmp	.+14     	; 0x950 <MCP2515init+0x36>
	{
		printf("MCP2515 NOT in configuration mode!\n\r");
     942:	83 e8       	ldi	r24, 0x83	; 131
     944:	94 e0       	ldi	r25, 0x04	; 4
     946:	9f 93       	push	r25
     948:	8f 93       	push	r24
     94a:	98 d0       	rcall	.+304    	; 0xa7c <printf>
     94c:	0f 90       	pop	r0
     94e:	0f 90       	pop	r0
	}

	MCP2515_bitMask(MCP_CANINTE, 0x5c ,0x00); // Disable WAKEUP and TXB Interrupt
     950:	40 e0       	ldi	r20, 0x00	; 0
     952:	6c e5       	ldi	r22, 0x5C	; 92
     954:	8b e2       	ldi	r24, 0x2B	; 43
     956:	cd df       	rcall	.-102    	; 0x8f2 <MCP2515_bitMask>
	MCP2515_bitMask(MCP_CANINTE, 0xff ,0xa3); // Enable ERROR and RX interrupts
     958:	43 ea       	ldi	r20, 0xA3	; 163
     95a:	6f ef       	ldi	r22, 0xFF	; 255
     95c:	8b e2       	ldi	r24, 0x2B	; 43
	MCP2515_Write(MCP_CANCTRL,MODE); // Enable loopback mode for testing
     95e:	c9 df       	rcall	.-110    	; 0x8f2 <MCP2515_bitMask>
     960:	6d 2f       	mov	r22, r29
     962:	8f e0       	ldi	r24, 0x0F	; 15
     964:	97 df       	rcall	.-210    	; 0x894 <MCP2515_Write>
	
	state = MCP2515_readStatus(MCP_CANSTAT);
     966:	8e e0       	ldi	r24, 0x0E	; 14
     968:	b7 df       	rcall	.-146    	; 0x8d8 <MCP2515_readStatus>
	printf("\n\nCANSTAT: %x\n\n\r", state);
     96a:	1f 92       	push	r1
     96c:	8f 93       	push	r24
     96e:	88 ea       	ldi	r24, 0xA8	; 168
     970:	94 e0       	ldi	r25, 0x04	; 4
     972:	9f 93       	push	r25
     974:	8f 93       	push	r24
     976:	82 d0       	rcall	.+260    	; 0xa7c <printf>
     978:	0f 90       	pop	r0
	
}
     97a:	0f 90       	pop	r0
     97c:	0f 90       	pop	r0
     97e:	0f 90       	pop	r0
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	08 95       	ret

00000986 <SPI_MasterInit>:
     986:	87 e8       	ldi	r24, 0x87	; 135
	
	

	receiveData = SPDR;

}
     988:	84 b9       	out	0x04, r24	; 4
     98a:	81 e5       	ldi	r24, 0x51	; 81
     98c:	8c bd       	out	0x2c, r24	; 44
     98e:	2f 9a       	sbi	0x05, 7	; 5
     990:	08 95       	ret

00000992 <SPI_write>:


void SPI_write(char Data)
{
	/* Start transmission */
	SPDR = Data;
     992:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	loop_until_bit_is_set(SPSR, SPIF);
     994:	0d b4       	in	r0, 0x2d	; 45
     996:	07 fe       	sbrs	r0, 7
     998:	fd cf       	rjmp	.-6      	; 0x994 <SPI_write+0x2>
}
     99a:	08 95       	ret

0000099c <SPI_read>:

char SPI_read(void)
{

	SPDR = 0x01;
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	loop_until_bit_is_set(SPSR, SPIF);
     9a0:	0d b4       	in	r0, 0x2d	; 45
     9a2:	07 fe       	sbrs	r0, 7
     9a4:	fd cf       	rjmp	.-6      	; 0x9a0 <SPI_read+0x4>
	//while(!(SPSR & (1<<SPIF)));

	return SPDR;
     9a6:	8e b5       	in	r24, 0x2e	; 46
}
     9a8:	08 95       	ret

000009aa <SPI_SlaveSelect>:


void SPI_SlaveSelect(void)
{
	/*Select slave*/
	PORTB &= ~(1<<PB7);
     9aa:	2f 98       	cbi	0x05, 7	; 5
     9ac:	08 95       	ret

000009ae <SPI_SlaveDeselect>:
}

void SPI_SlaveDeselect(void)
{
	/*Deselect slave*/
	PORTB |= (1<<PB7);
     9ae:	2f 9a       	sbi	0x05, 7	; 5
     9b0:	08 95       	ret

000009b2 <USART_Init>:


void USART_Init( unsigned int ubrr )
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     9b2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (unsigned char)ubrr;
     9b6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     9ba:	88 e1       	ldi	r24, 0x18	; 24
     9bc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = /*(1<<URSEL0)|*/(1<<USBS0)|(3<<UCSZ00);
     9c0:	8e e0       	ldi	r24, 0x0E	; 14
     9c2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     9c6:	08 95       	ret

000009c8 <USART_Receive>:


unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
     9c8:	e0 ec       	ldi	r30, 0xC0	; 192
     9ca:	f0 e0       	ldi	r31, 0x00	; 0
     9cc:	80 81       	ld	r24, Z
     9ce:	88 23       	and	r24, r24
     9d0:	ec f7       	brge	.-6      	; 0x9cc <USART_Receive+0x4>
	;
	/* Get and return received data from buffer */
	return UDR0;
     9d2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
}
     9d6:	08 95       	ret

000009d8 <USART_Transmit>:

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<< UDRE0)) )
     9d8:	e0 ec       	ldi	r30, 0xC0	; 192
     9da:	f0 e0       	ldi	r31, 0x00	; 0
     9dc:	90 81       	ld	r25, Z
     9de:	95 ff       	sbrs	r25, 5
     9e0:	fd cf       	rjmp	.-6      	; 0x9dc <USART_Transmit+0x4>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
     9e2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     9e6:	08 95       	ret

000009e8 <fdevopen>:
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	31 f4       	brne	.+12     	; 0xa00 <fdevopen+0x18>
     9f4:	61 15       	cp	r22, r1
     9f6:	71 05       	cpc	r23, r1
     9f8:	19 f4       	brne	.+6      	; 0xa00 <fdevopen+0x18>
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	39 c0       	rjmp	.+114    	; 0xa72 <fdevopen+0x8a>
     a00:	8b 01       	movw	r16, r22
     a02:	ec 01       	movw	r28, r24
     a04:	6e e0       	ldi	r22, 0x0E	; 14
     a06:	70 e0       	ldi	r23, 0x00	; 0
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	47 d2       	rcall	.+1166   	; 0xe9c <calloc>
     a0e:	fc 01       	movw	r30, r24
     a10:	89 2b       	or	r24, r25
     a12:	99 f3       	breq	.-26     	; 0x9fa <fdevopen+0x12>
     a14:	80 e8       	ldi	r24, 0x80	; 128
     a16:	83 83       	std	Z+3, r24	; 0x03
     a18:	01 15       	cp	r16, r1
     a1a:	11 05       	cpc	r17, r1
     a1c:	71 f0       	breq	.+28     	; 0xa3a <fdevopen+0x52>
     a1e:	13 87       	std	Z+11, r17	; 0x0b
     a20:	02 87       	std	Z+10, r16	; 0x0a
     a22:	81 e8       	ldi	r24, 0x81	; 129
     a24:	83 83       	std	Z+3, r24	; 0x03
     a26:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <__iob>
     a2a:	90 91 00 05 	lds	r25, 0x0500	; 0x800500 <__iob+0x1>
     a2e:	89 2b       	or	r24, r25
     a30:	21 f4       	brne	.+8      	; 0xa3a <fdevopen+0x52>
     a32:	f0 93 00 05 	sts	0x0500, r31	; 0x800500 <__iob+0x1>
     a36:	e0 93 ff 04 	sts	0x04FF, r30	; 0x8004ff <__iob>
     a3a:	20 97       	sbiw	r28, 0x00	; 0
     a3c:	c9 f0       	breq	.+50     	; 0xa70 <fdevopen+0x88>
     a3e:	d1 87       	std	Z+9, r29	; 0x09
     a40:	c0 87       	std	Z+8, r28	; 0x08
     a42:	83 81       	ldd	r24, Z+3	; 0x03
     a44:	82 60       	ori	r24, 0x02	; 2
     a46:	83 83       	std	Z+3, r24	; 0x03
     a48:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <__iob+0x2>
     a4c:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <__iob+0x3>
     a50:	89 2b       	or	r24, r25
     a52:	71 f4       	brne	.+28     	; 0xa70 <fdevopen+0x88>
     a54:	f0 93 02 05 	sts	0x0502, r31	; 0x800502 <__iob+0x3>
     a58:	e0 93 01 05 	sts	0x0501, r30	; 0x800501 <__iob+0x2>
     a5c:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <__iob+0x4>
     a60:	90 91 04 05 	lds	r25, 0x0504	; 0x800504 <__iob+0x5>
     a64:	89 2b       	or	r24, r25
     a66:	21 f4       	brne	.+8      	; 0xa70 <fdevopen+0x88>
     a68:	f0 93 04 05 	sts	0x0504, r31	; 0x800504 <__iob+0x5>
     a6c:	e0 93 03 05 	sts	0x0503, r30	; 0x800503 <__iob+0x4>
     a70:	cf 01       	movw	r24, r30
     a72:	df 91       	pop	r29
     a74:	cf 91       	pop	r28
     a76:	1f 91       	pop	r17
     a78:	0f 91       	pop	r16
     a7a:	08 95       	ret

00000a7c <printf>:
     a7c:	cf 93       	push	r28
     a7e:	df 93       	push	r29
     a80:	cd b7       	in	r28, 0x3d	; 61
     a82:	de b7       	in	r29, 0x3e	; 62
     a84:	ae 01       	movw	r20, r28
     a86:	4a 5f       	subi	r20, 0xFA	; 250
     a88:	5f 4f       	sbci	r21, 0xFF	; 255
     a8a:	fa 01       	movw	r30, r20
     a8c:	61 91       	ld	r22, Z+
     a8e:	71 91       	ld	r23, Z+
     a90:	af 01       	movw	r20, r30
     a92:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <__iob+0x2>
     a96:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <__iob+0x3>
     a9a:	03 d0       	rcall	.+6      	; 0xaa2 <vfprintf>
     a9c:	df 91       	pop	r29
     a9e:	cf 91       	pop	r28
     aa0:	08 95       	ret

00000aa2 <vfprintf>:
     aa2:	2f 92       	push	r2
     aa4:	3f 92       	push	r3
     aa6:	4f 92       	push	r4
     aa8:	5f 92       	push	r5
     aaa:	6f 92       	push	r6
     aac:	7f 92       	push	r7
     aae:	8f 92       	push	r8
     ab0:	9f 92       	push	r9
     ab2:	af 92       	push	r10
     ab4:	bf 92       	push	r11
     ab6:	cf 92       	push	r12
     ab8:	df 92       	push	r13
     aba:	ef 92       	push	r14
     abc:	ff 92       	push	r15
     abe:	0f 93       	push	r16
     ac0:	1f 93       	push	r17
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
     ac6:	cd b7       	in	r28, 0x3d	; 61
     ac8:	de b7       	in	r29, 0x3e	; 62
     aca:	2b 97       	sbiw	r28, 0x0b	; 11
     acc:	0f b6       	in	r0, 0x3f	; 63
     ace:	f8 94       	cli
     ad0:	de bf       	out	0x3e, r29	; 62
     ad2:	0f be       	out	0x3f, r0	; 63
     ad4:	cd bf       	out	0x3d, r28	; 61
     ad6:	6c 01       	movw	r12, r24
     ad8:	7b 01       	movw	r14, r22
     ada:	8a 01       	movw	r16, r20
     adc:	fc 01       	movw	r30, r24
     ade:	17 82       	std	Z+7, r1	; 0x07
     ae0:	16 82       	std	Z+6, r1	; 0x06
     ae2:	83 81       	ldd	r24, Z+3	; 0x03
     ae4:	81 ff       	sbrs	r24, 1
     ae6:	bf c1       	rjmp	.+894    	; 0xe66 <vfprintf+0x3c4>
     ae8:	ce 01       	movw	r24, r28
     aea:	01 96       	adiw	r24, 0x01	; 1
     aec:	3c 01       	movw	r6, r24
     aee:	f6 01       	movw	r30, r12
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	f7 01       	movw	r30, r14
     af4:	93 fd       	sbrc	r25, 3
     af6:	85 91       	lpm	r24, Z+
     af8:	93 ff       	sbrs	r25, 3
     afa:	81 91       	ld	r24, Z+
     afc:	7f 01       	movw	r14, r30
     afe:	88 23       	and	r24, r24
     b00:	09 f4       	brne	.+2      	; 0xb04 <vfprintf+0x62>
     b02:	ad c1       	rjmp	.+858    	; 0xe5e <vfprintf+0x3bc>
     b04:	85 32       	cpi	r24, 0x25	; 37
     b06:	39 f4       	brne	.+14     	; 0xb16 <vfprintf+0x74>
     b08:	93 fd       	sbrc	r25, 3
     b0a:	85 91       	lpm	r24, Z+
     b0c:	93 ff       	sbrs	r25, 3
     b0e:	81 91       	ld	r24, Z+
     b10:	7f 01       	movw	r14, r30
     b12:	85 32       	cpi	r24, 0x25	; 37
     b14:	21 f4       	brne	.+8      	; 0xb1e <vfprintf+0x7c>
     b16:	b6 01       	movw	r22, r12
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	18 d3       	rcall	.+1584   	; 0x114c <fputc>
     b1c:	e8 cf       	rjmp	.-48     	; 0xaee <vfprintf+0x4c>
     b1e:	91 2c       	mov	r9, r1
     b20:	21 2c       	mov	r2, r1
     b22:	31 2c       	mov	r3, r1
     b24:	ff e1       	ldi	r31, 0x1F	; 31
     b26:	f3 15       	cp	r31, r3
     b28:	d8 f0       	brcs	.+54     	; 0xb60 <vfprintf+0xbe>
     b2a:	8b 32       	cpi	r24, 0x2B	; 43
     b2c:	79 f0       	breq	.+30     	; 0xb4c <vfprintf+0xaa>
     b2e:	38 f4       	brcc	.+14     	; 0xb3e <vfprintf+0x9c>
     b30:	80 32       	cpi	r24, 0x20	; 32
     b32:	79 f0       	breq	.+30     	; 0xb52 <vfprintf+0xb0>
     b34:	83 32       	cpi	r24, 0x23	; 35
     b36:	a1 f4       	brne	.+40     	; 0xb60 <vfprintf+0xbe>
     b38:	23 2d       	mov	r18, r3
     b3a:	20 61       	ori	r18, 0x10	; 16
     b3c:	1d c0       	rjmp	.+58     	; 0xb78 <vfprintf+0xd6>
     b3e:	8d 32       	cpi	r24, 0x2D	; 45
     b40:	61 f0       	breq	.+24     	; 0xb5a <vfprintf+0xb8>
     b42:	80 33       	cpi	r24, 0x30	; 48
     b44:	69 f4       	brne	.+26     	; 0xb60 <vfprintf+0xbe>
     b46:	23 2d       	mov	r18, r3
     b48:	21 60       	ori	r18, 0x01	; 1
     b4a:	16 c0       	rjmp	.+44     	; 0xb78 <vfprintf+0xd6>
     b4c:	83 2d       	mov	r24, r3
     b4e:	82 60       	ori	r24, 0x02	; 2
     b50:	38 2e       	mov	r3, r24
     b52:	e3 2d       	mov	r30, r3
     b54:	e4 60       	ori	r30, 0x04	; 4
     b56:	3e 2e       	mov	r3, r30
     b58:	2a c0       	rjmp	.+84     	; 0xbae <vfprintf+0x10c>
     b5a:	f3 2d       	mov	r31, r3
     b5c:	f8 60       	ori	r31, 0x08	; 8
     b5e:	1d c0       	rjmp	.+58     	; 0xb9a <vfprintf+0xf8>
     b60:	37 fc       	sbrc	r3, 7
     b62:	2d c0       	rjmp	.+90     	; 0xbbe <vfprintf+0x11c>
     b64:	20 ed       	ldi	r18, 0xD0	; 208
     b66:	28 0f       	add	r18, r24
     b68:	2a 30       	cpi	r18, 0x0A	; 10
     b6a:	40 f0       	brcs	.+16     	; 0xb7c <vfprintf+0xda>
     b6c:	8e 32       	cpi	r24, 0x2E	; 46
     b6e:	b9 f4       	brne	.+46     	; 0xb9e <vfprintf+0xfc>
     b70:	36 fc       	sbrc	r3, 6
     b72:	75 c1       	rjmp	.+746    	; 0xe5e <vfprintf+0x3bc>
     b74:	23 2d       	mov	r18, r3
     b76:	20 64       	ori	r18, 0x40	; 64
     b78:	32 2e       	mov	r3, r18
     b7a:	19 c0       	rjmp	.+50     	; 0xbae <vfprintf+0x10c>
     b7c:	36 fe       	sbrs	r3, 6
     b7e:	06 c0       	rjmp	.+12     	; 0xb8c <vfprintf+0xea>
     b80:	8a e0       	ldi	r24, 0x0A	; 10
     b82:	98 9e       	mul	r9, r24
     b84:	20 0d       	add	r18, r0
     b86:	11 24       	eor	r1, r1
     b88:	92 2e       	mov	r9, r18
     b8a:	11 c0       	rjmp	.+34     	; 0xbae <vfprintf+0x10c>
     b8c:	ea e0       	ldi	r30, 0x0A	; 10
     b8e:	2e 9e       	mul	r2, r30
     b90:	20 0d       	add	r18, r0
     b92:	11 24       	eor	r1, r1
     b94:	22 2e       	mov	r2, r18
     b96:	f3 2d       	mov	r31, r3
     b98:	f0 62       	ori	r31, 0x20	; 32
     b9a:	3f 2e       	mov	r3, r31
     b9c:	08 c0       	rjmp	.+16     	; 0xbae <vfprintf+0x10c>
     b9e:	8c 36       	cpi	r24, 0x6C	; 108
     ba0:	21 f4       	brne	.+8      	; 0xbaa <vfprintf+0x108>
     ba2:	83 2d       	mov	r24, r3
     ba4:	80 68       	ori	r24, 0x80	; 128
     ba6:	38 2e       	mov	r3, r24
     ba8:	02 c0       	rjmp	.+4      	; 0xbae <vfprintf+0x10c>
     baa:	88 36       	cpi	r24, 0x68	; 104
     bac:	41 f4       	brne	.+16     	; 0xbbe <vfprintf+0x11c>
     bae:	f7 01       	movw	r30, r14
     bb0:	93 fd       	sbrc	r25, 3
     bb2:	85 91       	lpm	r24, Z+
     bb4:	93 ff       	sbrs	r25, 3
     bb6:	81 91       	ld	r24, Z+
     bb8:	7f 01       	movw	r14, r30
     bba:	81 11       	cpse	r24, r1
     bbc:	b3 cf       	rjmp	.-154    	; 0xb24 <vfprintf+0x82>
     bbe:	98 2f       	mov	r25, r24
     bc0:	9f 7d       	andi	r25, 0xDF	; 223
     bc2:	95 54       	subi	r25, 0x45	; 69
     bc4:	93 30       	cpi	r25, 0x03	; 3
     bc6:	28 f4       	brcc	.+10     	; 0xbd2 <vfprintf+0x130>
     bc8:	0c 5f       	subi	r16, 0xFC	; 252
     bca:	1f 4f       	sbci	r17, 0xFF	; 255
     bcc:	9f e3       	ldi	r25, 0x3F	; 63
     bce:	99 83       	std	Y+1, r25	; 0x01
     bd0:	0d c0       	rjmp	.+26     	; 0xbec <vfprintf+0x14a>
     bd2:	83 36       	cpi	r24, 0x63	; 99
     bd4:	31 f0       	breq	.+12     	; 0xbe2 <vfprintf+0x140>
     bd6:	83 37       	cpi	r24, 0x73	; 115
     bd8:	71 f0       	breq	.+28     	; 0xbf6 <vfprintf+0x154>
     bda:	83 35       	cpi	r24, 0x53	; 83
     bdc:	09 f0       	breq	.+2      	; 0xbe0 <vfprintf+0x13e>
     bde:	55 c0       	rjmp	.+170    	; 0xc8a <vfprintf+0x1e8>
     be0:	20 c0       	rjmp	.+64     	; 0xc22 <vfprintf+0x180>
     be2:	f8 01       	movw	r30, r16
     be4:	80 81       	ld	r24, Z
     be6:	89 83       	std	Y+1, r24	; 0x01
     be8:	0e 5f       	subi	r16, 0xFE	; 254
     bea:	1f 4f       	sbci	r17, 0xFF	; 255
     bec:	88 24       	eor	r8, r8
     bee:	83 94       	inc	r8
     bf0:	91 2c       	mov	r9, r1
     bf2:	53 01       	movw	r10, r6
     bf4:	12 c0       	rjmp	.+36     	; 0xc1a <vfprintf+0x178>
     bf6:	28 01       	movw	r4, r16
     bf8:	f2 e0       	ldi	r31, 0x02	; 2
     bfa:	4f 0e       	add	r4, r31
     bfc:	51 1c       	adc	r5, r1
     bfe:	f8 01       	movw	r30, r16
     c00:	a0 80       	ld	r10, Z
     c02:	b1 80       	ldd	r11, Z+1	; 0x01
     c04:	36 fe       	sbrs	r3, 6
     c06:	03 c0       	rjmp	.+6      	; 0xc0e <vfprintf+0x16c>
     c08:	69 2d       	mov	r22, r9
     c0a:	70 e0       	ldi	r23, 0x00	; 0
     c0c:	02 c0       	rjmp	.+4      	; 0xc12 <vfprintf+0x170>
     c0e:	6f ef       	ldi	r22, 0xFF	; 255
     c10:	7f ef       	ldi	r23, 0xFF	; 255
     c12:	c5 01       	movw	r24, r10
     c14:	90 d2       	rcall	.+1312   	; 0x1136 <strnlen>
     c16:	4c 01       	movw	r8, r24
     c18:	82 01       	movw	r16, r4
     c1a:	f3 2d       	mov	r31, r3
     c1c:	ff 77       	andi	r31, 0x7F	; 127
     c1e:	3f 2e       	mov	r3, r31
     c20:	15 c0       	rjmp	.+42     	; 0xc4c <vfprintf+0x1aa>
     c22:	28 01       	movw	r4, r16
     c24:	22 e0       	ldi	r18, 0x02	; 2
     c26:	42 0e       	add	r4, r18
     c28:	51 1c       	adc	r5, r1
     c2a:	f8 01       	movw	r30, r16
     c2c:	a0 80       	ld	r10, Z
     c2e:	b1 80       	ldd	r11, Z+1	; 0x01
     c30:	36 fe       	sbrs	r3, 6
     c32:	03 c0       	rjmp	.+6      	; 0xc3a <vfprintf+0x198>
     c34:	69 2d       	mov	r22, r9
     c36:	70 e0       	ldi	r23, 0x00	; 0
     c38:	02 c0       	rjmp	.+4      	; 0xc3e <vfprintf+0x19c>
     c3a:	6f ef       	ldi	r22, 0xFF	; 255
     c3c:	7f ef       	ldi	r23, 0xFF	; 255
     c3e:	c5 01       	movw	r24, r10
     c40:	68 d2       	rcall	.+1232   	; 0x1112 <strnlen_P>
     c42:	4c 01       	movw	r8, r24
     c44:	f3 2d       	mov	r31, r3
     c46:	f0 68       	ori	r31, 0x80	; 128
     c48:	3f 2e       	mov	r3, r31
     c4a:	82 01       	movw	r16, r4
     c4c:	33 fc       	sbrc	r3, 3
     c4e:	19 c0       	rjmp	.+50     	; 0xc82 <vfprintf+0x1e0>
     c50:	82 2d       	mov	r24, r2
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	88 16       	cp	r8, r24
     c56:	99 06       	cpc	r9, r25
     c58:	a0 f4       	brcc	.+40     	; 0xc82 <vfprintf+0x1e0>
     c5a:	b6 01       	movw	r22, r12
     c5c:	80 e2       	ldi	r24, 0x20	; 32
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	75 d2       	rcall	.+1258   	; 0x114c <fputc>
     c62:	2a 94       	dec	r2
     c64:	f5 cf       	rjmp	.-22     	; 0xc50 <vfprintf+0x1ae>
     c66:	f5 01       	movw	r30, r10
     c68:	37 fc       	sbrc	r3, 7
     c6a:	85 91       	lpm	r24, Z+
     c6c:	37 fe       	sbrs	r3, 7
     c6e:	81 91       	ld	r24, Z+
     c70:	5f 01       	movw	r10, r30
     c72:	b6 01       	movw	r22, r12
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	6a d2       	rcall	.+1236   	; 0x114c <fputc>
     c78:	21 10       	cpse	r2, r1
     c7a:	2a 94       	dec	r2
     c7c:	21 e0       	ldi	r18, 0x01	; 1
     c7e:	82 1a       	sub	r8, r18
     c80:	91 08       	sbc	r9, r1
     c82:	81 14       	cp	r8, r1
     c84:	91 04       	cpc	r9, r1
     c86:	79 f7       	brne	.-34     	; 0xc66 <vfprintf+0x1c4>
     c88:	e1 c0       	rjmp	.+450    	; 0xe4c <vfprintf+0x3aa>
     c8a:	84 36       	cpi	r24, 0x64	; 100
     c8c:	11 f0       	breq	.+4      	; 0xc92 <vfprintf+0x1f0>
     c8e:	89 36       	cpi	r24, 0x69	; 105
     c90:	39 f5       	brne	.+78     	; 0xce0 <vfprintf+0x23e>
     c92:	f8 01       	movw	r30, r16
     c94:	37 fe       	sbrs	r3, 7
     c96:	07 c0       	rjmp	.+14     	; 0xca6 <vfprintf+0x204>
     c98:	60 81       	ld	r22, Z
     c9a:	71 81       	ldd	r23, Z+1	; 0x01
     c9c:	82 81       	ldd	r24, Z+2	; 0x02
     c9e:	93 81       	ldd	r25, Z+3	; 0x03
     ca0:	0c 5f       	subi	r16, 0xFC	; 252
     ca2:	1f 4f       	sbci	r17, 0xFF	; 255
     ca4:	08 c0       	rjmp	.+16     	; 0xcb6 <vfprintf+0x214>
     ca6:	60 81       	ld	r22, Z
     ca8:	71 81       	ldd	r23, Z+1	; 0x01
     caa:	07 2e       	mov	r0, r23
     cac:	00 0c       	add	r0, r0
     cae:	88 0b       	sbc	r24, r24
     cb0:	99 0b       	sbc	r25, r25
     cb2:	0e 5f       	subi	r16, 0xFE	; 254
     cb4:	1f 4f       	sbci	r17, 0xFF	; 255
     cb6:	f3 2d       	mov	r31, r3
     cb8:	ff 76       	andi	r31, 0x6F	; 111
     cba:	3f 2e       	mov	r3, r31
     cbc:	97 ff       	sbrs	r25, 7
     cbe:	09 c0       	rjmp	.+18     	; 0xcd2 <vfprintf+0x230>
     cc0:	90 95       	com	r25
     cc2:	80 95       	com	r24
     cc4:	70 95       	com	r23
     cc6:	61 95       	neg	r22
     cc8:	7f 4f       	sbci	r23, 0xFF	; 255
     cca:	8f 4f       	sbci	r24, 0xFF	; 255
     ccc:	9f 4f       	sbci	r25, 0xFF	; 255
     cce:	f0 68       	ori	r31, 0x80	; 128
     cd0:	3f 2e       	mov	r3, r31
     cd2:	2a e0       	ldi	r18, 0x0A	; 10
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	a3 01       	movw	r20, r6
     cd8:	75 d2       	rcall	.+1258   	; 0x11c4 <__ultoa_invert>
     cda:	88 2e       	mov	r8, r24
     cdc:	86 18       	sub	r8, r6
     cde:	44 c0       	rjmp	.+136    	; 0xd68 <vfprintf+0x2c6>
     ce0:	85 37       	cpi	r24, 0x75	; 117
     ce2:	31 f4       	brne	.+12     	; 0xcf0 <vfprintf+0x24e>
     ce4:	23 2d       	mov	r18, r3
     ce6:	2f 7e       	andi	r18, 0xEF	; 239
     ce8:	b2 2e       	mov	r11, r18
     cea:	2a e0       	ldi	r18, 0x0A	; 10
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	25 c0       	rjmp	.+74     	; 0xd3a <vfprintf+0x298>
     cf0:	93 2d       	mov	r25, r3
     cf2:	99 7f       	andi	r25, 0xF9	; 249
     cf4:	b9 2e       	mov	r11, r25
     cf6:	8f 36       	cpi	r24, 0x6F	; 111
     cf8:	c1 f0       	breq	.+48     	; 0xd2a <vfprintf+0x288>
     cfa:	18 f4       	brcc	.+6      	; 0xd02 <vfprintf+0x260>
     cfc:	88 35       	cpi	r24, 0x58	; 88
     cfe:	79 f0       	breq	.+30     	; 0xd1e <vfprintf+0x27c>
     d00:	ae c0       	rjmp	.+348    	; 0xe5e <vfprintf+0x3bc>
     d02:	80 37       	cpi	r24, 0x70	; 112
     d04:	19 f0       	breq	.+6      	; 0xd0c <vfprintf+0x26a>
     d06:	88 37       	cpi	r24, 0x78	; 120
     d08:	21 f0       	breq	.+8      	; 0xd12 <vfprintf+0x270>
     d0a:	a9 c0       	rjmp	.+338    	; 0xe5e <vfprintf+0x3bc>
     d0c:	e9 2f       	mov	r30, r25
     d0e:	e0 61       	ori	r30, 0x10	; 16
     d10:	be 2e       	mov	r11, r30
     d12:	b4 fe       	sbrs	r11, 4
     d14:	0d c0       	rjmp	.+26     	; 0xd30 <vfprintf+0x28e>
     d16:	fb 2d       	mov	r31, r11
     d18:	f4 60       	ori	r31, 0x04	; 4
     d1a:	bf 2e       	mov	r11, r31
     d1c:	09 c0       	rjmp	.+18     	; 0xd30 <vfprintf+0x28e>
     d1e:	34 fe       	sbrs	r3, 4
     d20:	0a c0       	rjmp	.+20     	; 0xd36 <vfprintf+0x294>
     d22:	29 2f       	mov	r18, r25
     d24:	26 60       	ori	r18, 0x06	; 6
     d26:	b2 2e       	mov	r11, r18
     d28:	06 c0       	rjmp	.+12     	; 0xd36 <vfprintf+0x294>
     d2a:	28 e0       	ldi	r18, 0x08	; 8
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	05 c0       	rjmp	.+10     	; 0xd3a <vfprintf+0x298>
     d30:	20 e1       	ldi	r18, 0x10	; 16
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <vfprintf+0x298>
     d36:	20 e1       	ldi	r18, 0x10	; 16
     d38:	32 e0       	ldi	r19, 0x02	; 2
     d3a:	f8 01       	movw	r30, r16
     d3c:	b7 fe       	sbrs	r11, 7
     d3e:	07 c0       	rjmp	.+14     	; 0xd4e <vfprintf+0x2ac>
     d40:	60 81       	ld	r22, Z
     d42:	71 81       	ldd	r23, Z+1	; 0x01
     d44:	82 81       	ldd	r24, Z+2	; 0x02
     d46:	93 81       	ldd	r25, Z+3	; 0x03
     d48:	0c 5f       	subi	r16, 0xFC	; 252
     d4a:	1f 4f       	sbci	r17, 0xFF	; 255
     d4c:	06 c0       	rjmp	.+12     	; 0xd5a <vfprintf+0x2b8>
     d4e:	60 81       	ld	r22, Z
     d50:	71 81       	ldd	r23, Z+1	; 0x01
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	0e 5f       	subi	r16, 0xFE	; 254
     d58:	1f 4f       	sbci	r17, 0xFF	; 255
     d5a:	a3 01       	movw	r20, r6
     d5c:	33 d2       	rcall	.+1126   	; 0x11c4 <__ultoa_invert>
     d5e:	88 2e       	mov	r8, r24
     d60:	86 18       	sub	r8, r6
     d62:	fb 2d       	mov	r31, r11
     d64:	ff 77       	andi	r31, 0x7F	; 127
     d66:	3f 2e       	mov	r3, r31
     d68:	36 fe       	sbrs	r3, 6
     d6a:	0d c0       	rjmp	.+26     	; 0xd86 <vfprintf+0x2e4>
     d6c:	23 2d       	mov	r18, r3
     d6e:	2e 7f       	andi	r18, 0xFE	; 254
     d70:	a2 2e       	mov	r10, r18
     d72:	89 14       	cp	r8, r9
     d74:	58 f4       	brcc	.+22     	; 0xd8c <vfprintf+0x2ea>
     d76:	34 fe       	sbrs	r3, 4
     d78:	0b c0       	rjmp	.+22     	; 0xd90 <vfprintf+0x2ee>
     d7a:	32 fc       	sbrc	r3, 2
     d7c:	09 c0       	rjmp	.+18     	; 0xd90 <vfprintf+0x2ee>
     d7e:	83 2d       	mov	r24, r3
     d80:	8e 7e       	andi	r24, 0xEE	; 238
     d82:	a8 2e       	mov	r10, r24
     d84:	05 c0       	rjmp	.+10     	; 0xd90 <vfprintf+0x2ee>
     d86:	b8 2c       	mov	r11, r8
     d88:	a3 2c       	mov	r10, r3
     d8a:	03 c0       	rjmp	.+6      	; 0xd92 <vfprintf+0x2f0>
     d8c:	b8 2c       	mov	r11, r8
     d8e:	01 c0       	rjmp	.+2      	; 0xd92 <vfprintf+0x2f0>
     d90:	b9 2c       	mov	r11, r9
     d92:	a4 fe       	sbrs	r10, 4
     d94:	0f c0       	rjmp	.+30     	; 0xdb4 <vfprintf+0x312>
     d96:	fe 01       	movw	r30, r28
     d98:	e8 0d       	add	r30, r8
     d9a:	f1 1d       	adc	r31, r1
     d9c:	80 81       	ld	r24, Z
     d9e:	80 33       	cpi	r24, 0x30	; 48
     da0:	21 f4       	brne	.+8      	; 0xdaa <vfprintf+0x308>
     da2:	9a 2d       	mov	r25, r10
     da4:	99 7e       	andi	r25, 0xE9	; 233
     da6:	a9 2e       	mov	r10, r25
     da8:	09 c0       	rjmp	.+18     	; 0xdbc <vfprintf+0x31a>
     daa:	a2 fe       	sbrs	r10, 2
     dac:	06 c0       	rjmp	.+12     	; 0xdba <vfprintf+0x318>
     dae:	b3 94       	inc	r11
     db0:	b3 94       	inc	r11
     db2:	04 c0       	rjmp	.+8      	; 0xdbc <vfprintf+0x31a>
     db4:	8a 2d       	mov	r24, r10
     db6:	86 78       	andi	r24, 0x86	; 134
     db8:	09 f0       	breq	.+2      	; 0xdbc <vfprintf+0x31a>
     dba:	b3 94       	inc	r11
     dbc:	a3 fc       	sbrc	r10, 3
     dbe:	10 c0       	rjmp	.+32     	; 0xde0 <vfprintf+0x33e>
     dc0:	a0 fe       	sbrs	r10, 0
     dc2:	06 c0       	rjmp	.+12     	; 0xdd0 <vfprintf+0x32e>
     dc4:	b2 14       	cp	r11, r2
     dc6:	80 f4       	brcc	.+32     	; 0xde8 <vfprintf+0x346>
     dc8:	28 0c       	add	r2, r8
     dca:	92 2c       	mov	r9, r2
     dcc:	9b 18       	sub	r9, r11
     dce:	0d c0       	rjmp	.+26     	; 0xdea <vfprintf+0x348>
     dd0:	b2 14       	cp	r11, r2
     dd2:	58 f4       	brcc	.+22     	; 0xdea <vfprintf+0x348>
     dd4:	b6 01       	movw	r22, r12
     dd6:	80 e2       	ldi	r24, 0x20	; 32
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	b8 d1       	rcall	.+880    	; 0x114c <fputc>
     ddc:	b3 94       	inc	r11
     dde:	f8 cf       	rjmp	.-16     	; 0xdd0 <vfprintf+0x32e>
     de0:	b2 14       	cp	r11, r2
     de2:	18 f4       	brcc	.+6      	; 0xdea <vfprintf+0x348>
     de4:	2b 18       	sub	r2, r11
     de6:	02 c0       	rjmp	.+4      	; 0xdec <vfprintf+0x34a>
     de8:	98 2c       	mov	r9, r8
     dea:	21 2c       	mov	r2, r1
     dec:	a4 fe       	sbrs	r10, 4
     dee:	0f c0       	rjmp	.+30     	; 0xe0e <vfprintf+0x36c>
     df0:	b6 01       	movw	r22, r12
     df2:	80 e3       	ldi	r24, 0x30	; 48
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	aa d1       	rcall	.+852    	; 0x114c <fputc>
     df8:	a2 fe       	sbrs	r10, 2
     dfa:	16 c0       	rjmp	.+44     	; 0xe28 <vfprintf+0x386>
     dfc:	a1 fc       	sbrc	r10, 1
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <vfprintf+0x364>
     e00:	88 e7       	ldi	r24, 0x78	; 120
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <vfprintf+0x368>
     e06:	88 e5       	ldi	r24, 0x58	; 88
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	b6 01       	movw	r22, r12
     e0c:	0c c0       	rjmp	.+24     	; 0xe26 <vfprintf+0x384>
     e0e:	8a 2d       	mov	r24, r10
     e10:	86 78       	andi	r24, 0x86	; 134
     e12:	51 f0       	breq	.+20     	; 0xe28 <vfprintf+0x386>
     e14:	a1 fe       	sbrs	r10, 1
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <vfprintf+0x37a>
     e18:	8b e2       	ldi	r24, 0x2B	; 43
     e1a:	01 c0       	rjmp	.+2      	; 0xe1e <vfprintf+0x37c>
     e1c:	80 e2       	ldi	r24, 0x20	; 32
     e1e:	a7 fc       	sbrc	r10, 7
     e20:	8d e2       	ldi	r24, 0x2D	; 45
     e22:	b6 01       	movw	r22, r12
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	92 d1       	rcall	.+804    	; 0x114c <fputc>
     e28:	89 14       	cp	r8, r9
     e2a:	30 f4       	brcc	.+12     	; 0xe38 <vfprintf+0x396>
     e2c:	b6 01       	movw	r22, r12
     e2e:	80 e3       	ldi	r24, 0x30	; 48
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	8c d1       	rcall	.+792    	; 0x114c <fputc>
     e34:	9a 94       	dec	r9
     e36:	f8 cf       	rjmp	.-16     	; 0xe28 <vfprintf+0x386>
     e38:	8a 94       	dec	r8
     e3a:	f3 01       	movw	r30, r6
     e3c:	e8 0d       	add	r30, r8
     e3e:	f1 1d       	adc	r31, r1
     e40:	80 81       	ld	r24, Z
     e42:	b6 01       	movw	r22, r12
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	82 d1       	rcall	.+772    	; 0x114c <fputc>
     e48:	81 10       	cpse	r8, r1
     e4a:	f6 cf       	rjmp	.-20     	; 0xe38 <vfprintf+0x396>
     e4c:	22 20       	and	r2, r2
     e4e:	09 f4       	brne	.+2      	; 0xe52 <vfprintf+0x3b0>
     e50:	4e ce       	rjmp	.-868    	; 0xaee <vfprintf+0x4c>
     e52:	b6 01       	movw	r22, r12
     e54:	80 e2       	ldi	r24, 0x20	; 32
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	79 d1       	rcall	.+754    	; 0x114c <fputc>
     e5a:	2a 94       	dec	r2
     e5c:	f7 cf       	rjmp	.-18     	; 0xe4c <vfprintf+0x3aa>
     e5e:	f6 01       	movw	r30, r12
     e60:	86 81       	ldd	r24, Z+6	; 0x06
     e62:	97 81       	ldd	r25, Z+7	; 0x07
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <vfprintf+0x3c8>
     e66:	8f ef       	ldi	r24, 0xFF	; 255
     e68:	9f ef       	ldi	r25, 0xFF	; 255
     e6a:	2b 96       	adiw	r28, 0x0b	; 11
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	f8 94       	cli
     e70:	de bf       	out	0x3e, r29	; 62
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	cd bf       	out	0x3d, r28	; 61
     e76:	df 91       	pop	r29
     e78:	cf 91       	pop	r28
     e7a:	1f 91       	pop	r17
     e7c:	0f 91       	pop	r16
     e7e:	ff 90       	pop	r15
     e80:	ef 90       	pop	r14
     e82:	df 90       	pop	r13
     e84:	cf 90       	pop	r12
     e86:	bf 90       	pop	r11
     e88:	af 90       	pop	r10
     e8a:	9f 90       	pop	r9
     e8c:	8f 90       	pop	r8
     e8e:	7f 90       	pop	r7
     e90:	6f 90       	pop	r6
     e92:	5f 90       	pop	r5
     e94:	4f 90       	pop	r4
     e96:	3f 90       	pop	r3
     e98:	2f 90       	pop	r2
     e9a:	08 95       	ret

00000e9c <calloc>:
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	86 9f       	mul	r24, r22
     ea6:	80 01       	movw	r16, r0
     ea8:	87 9f       	mul	r24, r23
     eaa:	10 0d       	add	r17, r0
     eac:	96 9f       	mul	r25, r22
     eae:	10 0d       	add	r17, r0
     eb0:	11 24       	eor	r1, r1
     eb2:	c8 01       	movw	r24, r16
     eb4:	0d d0       	rcall	.+26     	; 0xed0 <malloc>
     eb6:	ec 01       	movw	r28, r24
     eb8:	00 97       	sbiw	r24, 0x00	; 0
     eba:	21 f0       	breq	.+8      	; 0xec4 <calloc+0x28>
     ebc:	a8 01       	movw	r20, r16
     ebe:	60 e0       	ldi	r22, 0x00	; 0
     ec0:	70 e0       	ldi	r23, 0x00	; 0
     ec2:	32 d1       	rcall	.+612    	; 0x1128 <memset>
     ec4:	ce 01       	movw	r24, r28
     ec6:	df 91       	pop	r29
     ec8:	cf 91       	pop	r28
     eca:	1f 91       	pop	r17
     ecc:	0f 91       	pop	r16
     ece:	08 95       	ret

00000ed0 <malloc>:
     ed0:	0f 93       	push	r16
     ed2:	1f 93       	push	r17
     ed4:	cf 93       	push	r28
     ed6:	df 93       	push	r29
     ed8:	82 30       	cpi	r24, 0x02	; 2
     eda:	91 05       	cpc	r25, r1
     edc:	10 f4       	brcc	.+4      	; 0xee2 <malloc+0x12>
     ede:	82 e0       	ldi	r24, 0x02	; 2
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	e0 91 07 05 	lds	r30, 0x0507	; 0x800507 <__flp>
     ee6:	f0 91 08 05 	lds	r31, 0x0508	; 0x800508 <__flp+0x1>
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	a0 e0       	ldi	r26, 0x00	; 0
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	30 97       	sbiw	r30, 0x00	; 0
     ef4:	19 f1       	breq	.+70     	; 0xf3c <malloc+0x6c>
     ef6:	40 81       	ld	r20, Z
     ef8:	51 81       	ldd	r21, Z+1	; 0x01
     efa:	02 81       	ldd	r16, Z+2	; 0x02
     efc:	13 81       	ldd	r17, Z+3	; 0x03
     efe:	48 17       	cp	r20, r24
     f00:	59 07       	cpc	r21, r25
     f02:	c8 f0       	brcs	.+50     	; 0xf36 <malloc+0x66>
     f04:	84 17       	cp	r24, r20
     f06:	95 07       	cpc	r25, r21
     f08:	69 f4       	brne	.+26     	; 0xf24 <malloc+0x54>
     f0a:	10 97       	sbiw	r26, 0x00	; 0
     f0c:	31 f0       	breq	.+12     	; 0xf1a <malloc+0x4a>
     f0e:	12 96       	adiw	r26, 0x02	; 2
     f10:	0c 93       	st	X, r16
     f12:	12 97       	sbiw	r26, 0x02	; 2
     f14:	13 96       	adiw	r26, 0x03	; 3
     f16:	1c 93       	st	X, r17
     f18:	27 c0       	rjmp	.+78     	; 0xf68 <malloc+0x98>
     f1a:	00 93 07 05 	sts	0x0507, r16	; 0x800507 <__flp>
     f1e:	10 93 08 05 	sts	0x0508, r17	; 0x800508 <__flp+0x1>
     f22:	22 c0       	rjmp	.+68     	; 0xf68 <malloc+0x98>
     f24:	21 15       	cp	r18, r1
     f26:	31 05       	cpc	r19, r1
     f28:	19 f0       	breq	.+6      	; 0xf30 <malloc+0x60>
     f2a:	42 17       	cp	r20, r18
     f2c:	53 07       	cpc	r21, r19
     f2e:	18 f4       	brcc	.+6      	; 0xf36 <malloc+0x66>
     f30:	9a 01       	movw	r18, r20
     f32:	bd 01       	movw	r22, r26
     f34:	ef 01       	movw	r28, r30
     f36:	df 01       	movw	r26, r30
     f38:	f8 01       	movw	r30, r16
     f3a:	db cf       	rjmp	.-74     	; 0xef2 <malloc+0x22>
     f3c:	21 15       	cp	r18, r1
     f3e:	31 05       	cpc	r19, r1
     f40:	f9 f0       	breq	.+62     	; 0xf80 <malloc+0xb0>
     f42:	28 1b       	sub	r18, r24
     f44:	39 0b       	sbc	r19, r25
     f46:	24 30       	cpi	r18, 0x04	; 4
     f48:	31 05       	cpc	r19, r1
     f4a:	80 f4       	brcc	.+32     	; 0xf6c <malloc+0x9c>
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	9b 81       	ldd	r25, Y+3	; 0x03
     f50:	61 15       	cp	r22, r1
     f52:	71 05       	cpc	r23, r1
     f54:	21 f0       	breq	.+8      	; 0xf5e <malloc+0x8e>
     f56:	fb 01       	movw	r30, r22
     f58:	93 83       	std	Z+3, r25	; 0x03
     f5a:	82 83       	std	Z+2, r24	; 0x02
     f5c:	04 c0       	rjmp	.+8      	; 0xf66 <malloc+0x96>
     f5e:	90 93 08 05 	sts	0x0508, r25	; 0x800508 <__flp+0x1>
     f62:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <__flp>
     f66:	fe 01       	movw	r30, r28
     f68:	32 96       	adiw	r30, 0x02	; 2
     f6a:	44 c0       	rjmp	.+136    	; 0xff4 <malloc+0x124>
     f6c:	fe 01       	movw	r30, r28
     f6e:	e2 0f       	add	r30, r18
     f70:	f3 1f       	adc	r31, r19
     f72:	81 93       	st	Z+, r24
     f74:	91 93       	st	Z+, r25
     f76:	22 50       	subi	r18, 0x02	; 2
     f78:	31 09       	sbc	r19, r1
     f7a:	39 83       	std	Y+1, r19	; 0x01
     f7c:	28 83       	st	Y, r18
     f7e:	3a c0       	rjmp	.+116    	; 0xff4 <malloc+0x124>
     f80:	20 91 05 05 	lds	r18, 0x0505	; 0x800505 <__brkval>
     f84:	30 91 06 05 	lds	r19, 0x0506	; 0x800506 <__brkval+0x1>
     f88:	23 2b       	or	r18, r19
     f8a:	41 f4       	brne	.+16     	; 0xf9c <malloc+0xcc>
     f8c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
     f90:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
     f94:	30 93 06 05 	sts	0x0506, r19	; 0x800506 <__brkval+0x1>
     f98:	20 93 05 05 	sts	0x0505, r18	; 0x800505 <__brkval>
     f9c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
     fa0:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
     fa4:	21 15       	cp	r18, r1
     fa6:	31 05       	cpc	r19, r1
     fa8:	41 f4       	brne	.+16     	; 0xfba <malloc+0xea>
     faa:	2d b7       	in	r18, 0x3d	; 61
     fac:	3e b7       	in	r19, 0x3e	; 62
     fae:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
     fb2:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
     fb6:	24 1b       	sub	r18, r20
     fb8:	35 0b       	sbc	r19, r21
     fba:	e0 91 05 05 	lds	r30, 0x0505	; 0x800505 <__brkval>
     fbe:	f0 91 06 05 	lds	r31, 0x0506	; 0x800506 <__brkval+0x1>
     fc2:	e2 17       	cp	r30, r18
     fc4:	f3 07       	cpc	r31, r19
     fc6:	a0 f4       	brcc	.+40     	; 0xff0 <malloc+0x120>
     fc8:	2e 1b       	sub	r18, r30
     fca:	3f 0b       	sbc	r19, r31
     fcc:	28 17       	cp	r18, r24
     fce:	39 07       	cpc	r19, r25
     fd0:	78 f0       	brcs	.+30     	; 0xff0 <malloc+0x120>
     fd2:	ac 01       	movw	r20, r24
     fd4:	4e 5f       	subi	r20, 0xFE	; 254
     fd6:	5f 4f       	sbci	r21, 0xFF	; 255
     fd8:	24 17       	cp	r18, r20
     fda:	35 07       	cpc	r19, r21
     fdc:	48 f0       	brcs	.+18     	; 0xff0 <malloc+0x120>
     fde:	4e 0f       	add	r20, r30
     fe0:	5f 1f       	adc	r21, r31
     fe2:	50 93 06 05 	sts	0x0506, r21	; 0x800506 <__brkval+0x1>
     fe6:	40 93 05 05 	sts	0x0505, r20	; 0x800505 <__brkval>
     fea:	81 93       	st	Z+, r24
     fec:	91 93       	st	Z+, r25
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <malloc+0x124>
     ff0:	e0 e0       	ldi	r30, 0x00	; 0
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	cf 01       	movw	r24, r30
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
     ffa:	1f 91       	pop	r17
     ffc:	0f 91       	pop	r16
     ffe:	08 95       	ret

00001000 <free>:
    1000:	cf 93       	push	r28
    1002:	df 93       	push	r29
    1004:	00 97       	sbiw	r24, 0x00	; 0
    1006:	09 f4       	brne	.+2      	; 0x100a <free+0xa>
    1008:	81 c0       	rjmp	.+258    	; 0x110c <free+0x10c>
    100a:	fc 01       	movw	r30, r24
    100c:	32 97       	sbiw	r30, 0x02	; 2
    100e:	13 82       	std	Z+3, r1	; 0x03
    1010:	12 82       	std	Z+2, r1	; 0x02
    1012:	a0 91 07 05 	lds	r26, 0x0507	; 0x800507 <__flp>
    1016:	b0 91 08 05 	lds	r27, 0x0508	; 0x800508 <__flp+0x1>
    101a:	10 97       	sbiw	r26, 0x00	; 0
    101c:	81 f4       	brne	.+32     	; 0x103e <free+0x3e>
    101e:	20 81       	ld	r18, Z
    1020:	31 81       	ldd	r19, Z+1	; 0x01
    1022:	82 0f       	add	r24, r18
    1024:	93 1f       	adc	r25, r19
    1026:	20 91 05 05 	lds	r18, 0x0505	; 0x800505 <__brkval>
    102a:	30 91 06 05 	lds	r19, 0x0506	; 0x800506 <__brkval+0x1>
    102e:	28 17       	cp	r18, r24
    1030:	39 07       	cpc	r19, r25
    1032:	51 f5       	brne	.+84     	; 0x1088 <free+0x88>
    1034:	f0 93 06 05 	sts	0x0506, r31	; 0x800506 <__brkval+0x1>
    1038:	e0 93 05 05 	sts	0x0505, r30	; 0x800505 <__brkval>
    103c:	67 c0       	rjmp	.+206    	; 0x110c <free+0x10c>
    103e:	ed 01       	movw	r28, r26
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	ce 17       	cp	r28, r30
    1046:	df 07       	cpc	r29, r31
    1048:	40 f4       	brcc	.+16     	; 0x105a <free+0x5a>
    104a:	4a 81       	ldd	r20, Y+2	; 0x02
    104c:	5b 81       	ldd	r21, Y+3	; 0x03
    104e:	9e 01       	movw	r18, r28
    1050:	41 15       	cp	r20, r1
    1052:	51 05       	cpc	r21, r1
    1054:	f1 f0       	breq	.+60     	; 0x1092 <free+0x92>
    1056:	ea 01       	movw	r28, r20
    1058:	f5 cf       	rjmp	.-22     	; 0x1044 <free+0x44>
    105a:	d3 83       	std	Z+3, r29	; 0x03
    105c:	c2 83       	std	Z+2, r28	; 0x02
    105e:	40 81       	ld	r20, Z
    1060:	51 81       	ldd	r21, Z+1	; 0x01
    1062:	84 0f       	add	r24, r20
    1064:	95 1f       	adc	r25, r21
    1066:	c8 17       	cp	r28, r24
    1068:	d9 07       	cpc	r29, r25
    106a:	59 f4       	brne	.+22     	; 0x1082 <free+0x82>
    106c:	88 81       	ld	r24, Y
    106e:	99 81       	ldd	r25, Y+1	; 0x01
    1070:	84 0f       	add	r24, r20
    1072:	95 1f       	adc	r25, r21
    1074:	02 96       	adiw	r24, 0x02	; 2
    1076:	91 83       	std	Z+1, r25	; 0x01
    1078:	80 83       	st	Z, r24
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	9b 81       	ldd	r25, Y+3	; 0x03
    107e:	93 83       	std	Z+3, r25	; 0x03
    1080:	82 83       	std	Z+2, r24	; 0x02
    1082:	21 15       	cp	r18, r1
    1084:	31 05       	cpc	r19, r1
    1086:	29 f4       	brne	.+10     	; 0x1092 <free+0x92>
    1088:	f0 93 08 05 	sts	0x0508, r31	; 0x800508 <__flp+0x1>
    108c:	e0 93 07 05 	sts	0x0507, r30	; 0x800507 <__flp>
    1090:	3d c0       	rjmp	.+122    	; 0x110c <free+0x10c>
    1092:	e9 01       	movw	r28, r18
    1094:	fb 83       	std	Y+3, r31	; 0x03
    1096:	ea 83       	std	Y+2, r30	; 0x02
    1098:	49 91       	ld	r20, Y+
    109a:	59 91       	ld	r21, Y+
    109c:	c4 0f       	add	r28, r20
    109e:	d5 1f       	adc	r29, r21
    10a0:	ec 17       	cp	r30, r28
    10a2:	fd 07       	cpc	r31, r29
    10a4:	61 f4       	brne	.+24     	; 0x10be <free+0xbe>
    10a6:	80 81       	ld	r24, Z
    10a8:	91 81       	ldd	r25, Z+1	; 0x01
    10aa:	84 0f       	add	r24, r20
    10ac:	95 1f       	adc	r25, r21
    10ae:	02 96       	adiw	r24, 0x02	; 2
    10b0:	e9 01       	movw	r28, r18
    10b2:	99 83       	std	Y+1, r25	; 0x01
    10b4:	88 83       	st	Y, r24
    10b6:	82 81       	ldd	r24, Z+2	; 0x02
    10b8:	93 81       	ldd	r25, Z+3	; 0x03
    10ba:	9b 83       	std	Y+3, r25	; 0x03
    10bc:	8a 83       	std	Y+2, r24	; 0x02
    10be:	e0 e0       	ldi	r30, 0x00	; 0
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	12 96       	adiw	r26, 0x02	; 2
    10c4:	8d 91       	ld	r24, X+
    10c6:	9c 91       	ld	r25, X
    10c8:	13 97       	sbiw	r26, 0x03	; 3
    10ca:	00 97       	sbiw	r24, 0x00	; 0
    10cc:	19 f0       	breq	.+6      	; 0x10d4 <free+0xd4>
    10ce:	fd 01       	movw	r30, r26
    10d0:	dc 01       	movw	r26, r24
    10d2:	f7 cf       	rjmp	.-18     	; 0x10c2 <free+0xc2>
    10d4:	8d 91       	ld	r24, X+
    10d6:	9c 91       	ld	r25, X
    10d8:	11 97       	sbiw	r26, 0x01	; 1
    10da:	9d 01       	movw	r18, r26
    10dc:	2e 5f       	subi	r18, 0xFE	; 254
    10de:	3f 4f       	sbci	r19, 0xFF	; 255
    10e0:	82 0f       	add	r24, r18
    10e2:	93 1f       	adc	r25, r19
    10e4:	20 91 05 05 	lds	r18, 0x0505	; 0x800505 <__brkval>
    10e8:	30 91 06 05 	lds	r19, 0x0506	; 0x800506 <__brkval+0x1>
    10ec:	28 17       	cp	r18, r24
    10ee:	39 07       	cpc	r19, r25
    10f0:	69 f4       	brne	.+26     	; 0x110c <free+0x10c>
    10f2:	30 97       	sbiw	r30, 0x00	; 0
    10f4:	29 f4       	brne	.+10     	; 0x1100 <free+0x100>
    10f6:	10 92 08 05 	sts	0x0508, r1	; 0x800508 <__flp+0x1>
    10fa:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <__flp>
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <free+0x104>
    1100:	13 82       	std	Z+3, r1	; 0x03
    1102:	12 82       	std	Z+2, r1	; 0x02
    1104:	b0 93 06 05 	sts	0x0506, r27	; 0x800506 <__brkval+0x1>
    1108:	a0 93 05 05 	sts	0x0505, r26	; 0x800505 <__brkval>
    110c:	df 91       	pop	r29
    110e:	cf 91       	pop	r28
    1110:	08 95       	ret

00001112 <strnlen_P>:
    1112:	fc 01       	movw	r30, r24
    1114:	05 90       	lpm	r0, Z+
    1116:	61 50       	subi	r22, 0x01	; 1
    1118:	70 40       	sbci	r23, 0x00	; 0
    111a:	01 10       	cpse	r0, r1
    111c:	d8 f7       	brcc	.-10     	; 0x1114 <strnlen_P+0x2>
    111e:	80 95       	com	r24
    1120:	90 95       	com	r25
    1122:	8e 0f       	add	r24, r30
    1124:	9f 1f       	adc	r25, r31
    1126:	08 95       	ret

00001128 <memset>:
    1128:	dc 01       	movw	r26, r24
    112a:	01 c0       	rjmp	.+2      	; 0x112e <memset+0x6>
    112c:	6d 93       	st	X+, r22
    112e:	41 50       	subi	r20, 0x01	; 1
    1130:	50 40       	sbci	r21, 0x00	; 0
    1132:	e0 f7       	brcc	.-8      	; 0x112c <memset+0x4>
    1134:	08 95       	ret

00001136 <strnlen>:
    1136:	fc 01       	movw	r30, r24
    1138:	61 50       	subi	r22, 0x01	; 1
    113a:	70 40       	sbci	r23, 0x00	; 0
    113c:	01 90       	ld	r0, Z+
    113e:	01 10       	cpse	r0, r1
    1140:	d8 f7       	brcc	.-10     	; 0x1138 <strnlen+0x2>
    1142:	80 95       	com	r24
    1144:	90 95       	com	r25
    1146:	8e 0f       	add	r24, r30
    1148:	9f 1f       	adc	r25, r31
    114a:	08 95       	ret

0000114c <fputc>:
    114c:	0f 93       	push	r16
    114e:	1f 93       	push	r17
    1150:	cf 93       	push	r28
    1152:	df 93       	push	r29
    1154:	fb 01       	movw	r30, r22
    1156:	23 81       	ldd	r18, Z+3	; 0x03
    1158:	21 fd       	sbrc	r18, 1
    115a:	03 c0       	rjmp	.+6      	; 0x1162 <fputc+0x16>
    115c:	8f ef       	ldi	r24, 0xFF	; 255
    115e:	9f ef       	ldi	r25, 0xFF	; 255
    1160:	2c c0       	rjmp	.+88     	; 0x11ba <fputc+0x6e>
    1162:	22 ff       	sbrs	r18, 2
    1164:	16 c0       	rjmp	.+44     	; 0x1192 <fputc+0x46>
    1166:	46 81       	ldd	r20, Z+6	; 0x06
    1168:	57 81       	ldd	r21, Z+7	; 0x07
    116a:	24 81       	ldd	r18, Z+4	; 0x04
    116c:	35 81       	ldd	r19, Z+5	; 0x05
    116e:	42 17       	cp	r20, r18
    1170:	53 07       	cpc	r21, r19
    1172:	44 f4       	brge	.+16     	; 0x1184 <fputc+0x38>
    1174:	a0 81       	ld	r26, Z
    1176:	b1 81       	ldd	r27, Z+1	; 0x01
    1178:	9d 01       	movw	r18, r26
    117a:	2f 5f       	subi	r18, 0xFF	; 255
    117c:	3f 4f       	sbci	r19, 0xFF	; 255
    117e:	31 83       	std	Z+1, r19	; 0x01
    1180:	20 83       	st	Z, r18
    1182:	8c 93       	st	X, r24
    1184:	26 81       	ldd	r18, Z+6	; 0x06
    1186:	37 81       	ldd	r19, Z+7	; 0x07
    1188:	2f 5f       	subi	r18, 0xFF	; 255
    118a:	3f 4f       	sbci	r19, 0xFF	; 255
    118c:	37 83       	std	Z+7, r19	; 0x07
    118e:	26 83       	std	Z+6, r18	; 0x06
    1190:	14 c0       	rjmp	.+40     	; 0x11ba <fputc+0x6e>
    1192:	8b 01       	movw	r16, r22
    1194:	ec 01       	movw	r28, r24
    1196:	fb 01       	movw	r30, r22
    1198:	00 84       	ldd	r0, Z+8	; 0x08
    119a:	f1 85       	ldd	r31, Z+9	; 0x09
    119c:	e0 2d       	mov	r30, r0
    119e:	19 95       	eicall
    11a0:	89 2b       	or	r24, r25
    11a2:	e1 f6       	brne	.-72     	; 0x115c <fputc+0x10>
    11a4:	d8 01       	movw	r26, r16
    11a6:	16 96       	adiw	r26, 0x06	; 6
    11a8:	8d 91       	ld	r24, X+
    11aa:	9c 91       	ld	r25, X
    11ac:	17 97       	sbiw	r26, 0x07	; 7
    11ae:	01 96       	adiw	r24, 0x01	; 1
    11b0:	17 96       	adiw	r26, 0x07	; 7
    11b2:	9c 93       	st	X, r25
    11b4:	8e 93       	st	-X, r24
    11b6:	16 97       	sbiw	r26, 0x06	; 6
    11b8:	ce 01       	movw	r24, r28
    11ba:	df 91       	pop	r29
    11bc:	cf 91       	pop	r28
    11be:	1f 91       	pop	r17
    11c0:	0f 91       	pop	r16
    11c2:	08 95       	ret

000011c4 <__ultoa_invert>:
    11c4:	fa 01       	movw	r30, r20
    11c6:	aa 27       	eor	r26, r26
    11c8:	28 30       	cpi	r18, 0x08	; 8
    11ca:	51 f1       	breq	.+84     	; 0x1220 <__ultoa_invert+0x5c>
    11cc:	20 31       	cpi	r18, 0x10	; 16
    11ce:	81 f1       	breq	.+96     	; 0x1230 <__ultoa_invert+0x6c>
    11d0:	e8 94       	clt
    11d2:	6f 93       	push	r22
    11d4:	6e 7f       	andi	r22, 0xFE	; 254
    11d6:	6e 5f       	subi	r22, 0xFE	; 254
    11d8:	7f 4f       	sbci	r23, 0xFF	; 255
    11da:	8f 4f       	sbci	r24, 0xFF	; 255
    11dc:	9f 4f       	sbci	r25, 0xFF	; 255
    11de:	af 4f       	sbci	r26, 0xFF	; 255
    11e0:	b1 e0       	ldi	r27, 0x01	; 1
    11e2:	3e d0       	rcall	.+124    	; 0x1260 <__ultoa_invert+0x9c>
    11e4:	b4 e0       	ldi	r27, 0x04	; 4
    11e6:	3c d0       	rcall	.+120    	; 0x1260 <__ultoa_invert+0x9c>
    11e8:	67 0f       	add	r22, r23
    11ea:	78 1f       	adc	r23, r24
    11ec:	89 1f       	adc	r24, r25
    11ee:	9a 1f       	adc	r25, r26
    11f0:	a1 1d       	adc	r26, r1
    11f2:	68 0f       	add	r22, r24
    11f4:	79 1f       	adc	r23, r25
    11f6:	8a 1f       	adc	r24, r26
    11f8:	91 1d       	adc	r25, r1
    11fa:	a1 1d       	adc	r26, r1
    11fc:	6a 0f       	add	r22, r26
    11fe:	71 1d       	adc	r23, r1
    1200:	81 1d       	adc	r24, r1
    1202:	91 1d       	adc	r25, r1
    1204:	a1 1d       	adc	r26, r1
    1206:	20 d0       	rcall	.+64     	; 0x1248 <__ultoa_invert+0x84>
    1208:	09 f4       	brne	.+2      	; 0x120c <__ultoa_invert+0x48>
    120a:	68 94       	set
    120c:	3f 91       	pop	r19
    120e:	2a e0       	ldi	r18, 0x0A	; 10
    1210:	26 9f       	mul	r18, r22
    1212:	11 24       	eor	r1, r1
    1214:	30 19       	sub	r19, r0
    1216:	30 5d       	subi	r19, 0xD0	; 208
    1218:	31 93       	st	Z+, r19
    121a:	de f6       	brtc	.-74     	; 0x11d2 <__ultoa_invert+0xe>
    121c:	cf 01       	movw	r24, r30
    121e:	08 95       	ret
    1220:	46 2f       	mov	r20, r22
    1222:	47 70       	andi	r20, 0x07	; 7
    1224:	40 5d       	subi	r20, 0xD0	; 208
    1226:	41 93       	st	Z+, r20
    1228:	b3 e0       	ldi	r27, 0x03	; 3
    122a:	0f d0       	rcall	.+30     	; 0x124a <__ultoa_invert+0x86>
    122c:	c9 f7       	brne	.-14     	; 0x1220 <__ultoa_invert+0x5c>
    122e:	f6 cf       	rjmp	.-20     	; 0x121c <__ultoa_invert+0x58>
    1230:	46 2f       	mov	r20, r22
    1232:	4f 70       	andi	r20, 0x0F	; 15
    1234:	40 5d       	subi	r20, 0xD0	; 208
    1236:	4a 33       	cpi	r20, 0x3A	; 58
    1238:	18 f0       	brcs	.+6      	; 0x1240 <__ultoa_invert+0x7c>
    123a:	49 5d       	subi	r20, 0xD9	; 217
    123c:	31 fd       	sbrc	r19, 1
    123e:	40 52       	subi	r20, 0x20	; 32
    1240:	41 93       	st	Z+, r20
    1242:	02 d0       	rcall	.+4      	; 0x1248 <__ultoa_invert+0x84>
    1244:	a9 f7       	brne	.-22     	; 0x1230 <__ultoa_invert+0x6c>
    1246:	ea cf       	rjmp	.-44     	; 0x121c <__ultoa_invert+0x58>
    1248:	b4 e0       	ldi	r27, 0x04	; 4
    124a:	a6 95       	lsr	r26
    124c:	97 95       	ror	r25
    124e:	87 95       	ror	r24
    1250:	77 95       	ror	r23
    1252:	67 95       	ror	r22
    1254:	ba 95       	dec	r27
    1256:	c9 f7       	brne	.-14     	; 0x124a <__ultoa_invert+0x86>
    1258:	00 97       	sbiw	r24, 0x00	; 0
    125a:	61 05       	cpc	r22, r1
    125c:	71 05       	cpc	r23, r1
    125e:	08 95       	ret
    1260:	9b 01       	movw	r18, r22
    1262:	ac 01       	movw	r20, r24
    1264:	0a 2e       	mov	r0, r26
    1266:	06 94       	lsr	r0
    1268:	57 95       	ror	r21
    126a:	47 95       	ror	r20
    126c:	37 95       	ror	r19
    126e:	27 95       	ror	r18
    1270:	ba 95       	dec	r27
    1272:	c9 f7       	brne	.-14     	; 0x1266 <__ultoa_invert+0xa2>
    1274:	62 0f       	add	r22, r18
    1276:	73 1f       	adc	r23, r19
    1278:	84 1f       	adc	r24, r20
    127a:	95 1f       	adc	r25, r21
    127c:	a0 1d       	adc	r26, r0
    127e:	08 95       	ret

00001280 <_exit>:
    1280:	f8 94       	cli

00001282 <__stop_program>:
    1282:	ff cf       	rjmp	.-2      	; 0x1282 <__stop_program>
